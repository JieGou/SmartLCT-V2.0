<MetroUI:MetroWindow x:Class="SmartLCT.MainWindow"
                     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:MetroUI="clr-namespace:Nova.SmartLCT.UI.MetroUI;assembly=Nova.SmartLCT.UI.MetroUI"
                     xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                     xmlns:Nova_SmartLCT_Behavior="clr-namespace:Nova.SmartLCT.Behavior;assembly=Behavior"
                     xmlns:Nova_SmartLCT_UI="clr-namespace:Nova.SmartLCT.UI;assembly=Nova.SmartLCT.UI.PropertyPanel"
                     xmlns:cmd="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Platform"
                     xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                     xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing"
                     xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
                     xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                     xmlns:ii="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                     xmlns:local="clr-namespace:SmartLCT"
                     xmlns:localInterface="clr-namespace:Nova.SmartLCT.Interface;assembly=Nova.SmartLCT.Interface.CommonData"
                     xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                     xmlns:my="clr-namespace:Nova.SmartLCT.SmartLCTControl;assembly=SmartLCTControl"
                     xmlns:myNumericUD="clr-namespace:Nova.Wpf.Control;assembly=Nova.Wpf.Control.NumericUpDown"
                     Title="{Binding WindowDisplayTitle,
                                     Mode=OneWay}"
                     Width="1143"
                     Height="1014"
                     Background="#FF232426"
                     Closed="CustomWindow_Closed"
                     IsTitleVisible="True"
                     MouseLeftButtonDown="Window_MouseLeftButtonDown"
                     WindowState="Maximized"
                     d:DesignHeight="300"
                     d:DesignWidth="2000"
                     mc:Ignorable="d">
    <!--  Width="1143"  -->
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <my:SmartLCTControl x:Key="SmartLCTControlDataSource" d:IsDataSource="True" />
        <local:MainWindow_VM x:Key="MainWindow_VMDataSource" d:IsDataSource="True" />
        <localInterface:SenderIndexConvertSenderName x:Key="senderIndexConvertSenderName" />
        <localInterface:PortIndexConvertPortName x:Key="portIndexConvertPortName" />
        <localInterface:RectConvertString x:Key="rectConvertString" />
        <localInterface:IsOverLoadConvertColor x:Key="isOverLoadConvertColor" />
        <localInterface:IsSelectedConvertColor x:Key="isSelectedConvertColor" />
        <localInterface:IsSelectedConvertMouseOverColor x:Key="isSelectedConvertMouseOverColor" />
        <localInterface:IsOverLoadConvertStr x:Key="isOverLoadConvertStr" />
        <BorderGapMaskConverter x:Key="BorderGapMaskConverter" />
        <localInterface:ConnectIndexConvertDeleteBtVisible x:Key="connectIndexConvertDeleteBtVisible" />
        <localInterface:SenderRectConvertArea x:Key="senderRectConvertArea" />
        <localInterface:PortRectConvertArea x:Key="portRectConvertArea" />
        <localInterface:SizeConvertString x:Key="sizeConvertString" />

        <Style x:Key="{x:Type ToolBar}" TargetType="{x:Type ToolBar}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToolBar}">
                        <Border Background="Transparent"
                                BorderBrush="{x:Null}"
                                BorderThickness="1"
                                CornerRadius="2">
                            <ToolBarPanel Margin="0,1,2,2" IsItemsHost="true" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="bButtonFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2"
                                   SnapsToDevicePixels="true"
                                   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="1" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="bButtonNormalBackground" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Offset="0" Color="#F3F3F3" />
            <GradientStop Offset="0.5" Color="#EBEBEB" />
            <GradientStop Offset="0.5" Color="#DDDDDD" />
            <GradientStop Offset="1" Color="#CDCDCD" />
        </LinearGradientBrush>
        <SolidColorBrush x:Key="bButtonNormalBorder" Color="#FF707070" />
        <Style TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource bButtonFocusVisual}" />
            <Setter Property="Background" Value="{StaticResource bButtonNormalBackground}" />
            <Setter Property="BorderBrush" Value="{StaticResource bButtonNormalBorder}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border"
                                BorderBrush="Black"
                                BorderThickness="1"
                                CornerRadius="3">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                    <GradientStop Offset="0" Color="#FF3995DE" />
                                    <GradientStop Offset="1" Color="#FF057AD7" />
                                    <GradientStop Offset="0.525" Color="#FF057AD7" />
                                    <GradientStop Offset="0.495" Color="#FF3995DE" />
                                </LinearGradientBrush>
                            </Border.Background>
                            <TextBlock HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Text="{TemplateBinding Content}"
                                       TextWrapping="Wrap" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background">
                                    <Setter.Value>
                                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                            <GradientStop Offset="0" Color="#FF75ECF2" />
                                            <GradientStop Offset="1" Color="#FF19E0E7" />
                                            <GradientStop Offset="0.5" Color="#FF19E0E7" />
                                            <GradientStop Offset="0.495" Color="#FF75ECF2" />
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true" />
                            <Trigger Property="ToggleButton.IsChecked" Value="true" />
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="myNumericUDBackground" TargetType="{x:Type myNumericUD:NumericUpDown}">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Offset="0" Color="#FF616161" />
                        <GradientStop Offset="1" Color="#FF585858" />
                        <GradientStop Offset="0.495" Color="#FF616161" />
                        <GradientStop Offset="0.5" Color="#FE585858" />
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="ListBorder" Color="#828790" />
        <!--  应该在此定义资源字典条目。  -->

        <ControlTemplate x:Key="ScrollViewerControlTemplate_Center" TargetType="{x:Type ScrollViewer}">
            <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                        Grid.Row="0"
                                        Grid.Column="0"
                                        Margin="{TemplateBinding Padding}"
                                        CanContentScroll="{TemplateBinding CanContentScroll}"
                                        CanHorizontallyScroll="False"
                                        CanVerticallyScroll="False"
                                        Content="{TemplateBinding Content}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                <ScrollBar x:Name="PART_VerticalScrollBar"
                           Grid.Row="0"
                           Grid.Column="1"
                           AutomationProperties.AutomationId="VerticalScrollBar"
                           Cursor="Arrow"
                           Maximum="{TemplateBinding ScrollableHeight}"
                           Minimum="0"
                           ViewportSize="{TemplateBinding ViewportHeight}"
                           Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                           Value="{Binding VerticalOffset,
                                           Mode=OneWay,
                                           RelativeSource={RelativeSource TemplatedParent}}" />
                <ScrollBar x:Name="PART_HorizontalScrollBar"
                           Grid.Row="1"
                           Grid.Column="0"
                           AutomationProperties.AutomationId="HorizontalScrollBar"
                           Cursor="Arrow"
                           Maximum="{TemplateBinding ScrollableWidth}"
                           Minimum="0"
                           Orientation="Horizontal"
                           ViewportSize="{TemplateBinding ViewportWidth}"
                           Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                           Value="{Binding HorizontalOffset,
                                           Mode=OneWay,
                                           RelativeSource={RelativeSource TemplatedParent}}" />
                <Rectangle x:Name="Corner"
                           Grid.Row="1"
                           Grid.Column="1"
                           Fill="#FF303435" />
            </Grid>
        </ControlTemplate>
        <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Microsoft_Windows_Themes:ScrollChrome x:Name="Chrome"
                                                               Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="{TemplateBinding Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph}"
                                                               RenderMouseOver="{TemplateBinding IsMouseOver}"
                                                               RenderPressed="{TemplateBinding IsPressed}"
                                                               SnapsToDevicePixels="true" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="VerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Rectangle Width="{TemplateBinding Width}"
                                   Height="{TemplateBinding Height}"
                                   Fill="{TemplateBinding Background}" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border BorderBrush="#FF6F7374" BorderThickness="0,1,0,0">
                            <Border Background="{DynamicResource MyScrollTruckBackground}"
                                    BorderBrush="#FF202123"
                                    BorderThickness="0,0,0,1" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarThumbv" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border BorderBrush="#FF4A4B4D" BorderThickness="1,0,0,0">
                            <Border Background="{DynamicResource MyScrollTruckBackgroundv}"
                                    BorderBrush="#FF202123"
                                    BorderThickness="0,0,1,0" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="HorizontalScrollBarBackground" StartPoint="0,0.5" EndPoint="1,0.5">
            <GradientStop Offset="1" Color="Black" />
            <GradientStop Color="#FF2C2D31" />
            <GradientStop Offset="0.083" Color="#FF3E4042" />
            <GradientStop Offset="0.923" Color="#FF303435" />
            <GradientStop Offset="0.104" Color="#FF303435" />
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="MyScrollTruckBackground" StartPoint="0,0.5" EndPoint="1,0.5">
            <GradientStop Offset="1" Color="Black" />
            <GradientStop Color="#FF545454" />
            <GradientStop Offset="0.08" Color="#FF4D4E4E" />
            <GradientStop Offset="0.98" Color="#FF303435" />
            <GradientStop Offset="0.075" Color="#FF303435" />
            <GradientStop Color="#FF4A4C4D" />

        </LinearGradientBrush>
        <LinearGradientBrush x:Key="MyScrollTruckBackgroundv" StartPoint="0.5,0" EndPoint="0.5,1">
            <GradientStop Offset="1" Color="Black" />
            <GradientStop Color="#FF545454" />
            <GradientStop Offset="0.08" Color="#FF4D4E4E" />
            <GradientStop Offset="0.98" Color="#FF303435" />
            <GradientStop Offset="0.075" Color="#FF303435" />
            <GradientStop Color="#FF4A4C4D" />
        </LinearGradientBrush>
        <Style x:Key="HorizontalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Rectangle Width="{TemplateBinding Width}"
                                   Height="{TemplateBinding Height}"
                                   Fill="{TemplateBinding Background}" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="SButtonFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2"
                                   SnapsToDevicePixels="true"
                                   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="1" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyle_ScrollBarLineUp" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}" />
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}" />
            <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="Black"
                                BorderThickness="0,1">
                            <ed:RegularPolygon Width="8"
                                               Height="6"
                                               Margin="5,0,0,0"
                                               HorizontalAlignment="Left"
                                               VerticalAlignment="Center"
                                               Fill="Black"
                                               InnerRadius="1"
                                               PointCount="3"
                                               RenderTransformOrigin="0.5,0.5"
                                               Stretch="Fill">
                                <ed:RegularPolygon.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform Angle="0" />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </ed:RegularPolygon.RenderTransform>
                            </ed:RegularPolygon>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="true" />
                            <Trigger Property="ToggleButton.IsChecked" Value="true" />
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyle_ScrollBarLineLeft" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}" />
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}" />
            <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="Black"
                                BorderThickness="0,1">
                            <ed:RegularPolygon Width="8"
                                               Height="6"
                                               Margin="5,0,0,0"
                                               HorizontalAlignment="Left"
                                               VerticalAlignment="Center"
                                               Fill="Black"
                                               InnerRadius="1"
                                               PointCount="3"
                                               RenderTransformOrigin="0.5,0.5"
                                               Stretch="Fill">
                                <ed:RegularPolygon.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform Angle="-90" />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </ed:RegularPolygon.RenderTransform>
                            </ed:RegularPolygon>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="true" />
                            <Trigger Property="ToggleButton.IsChecked" Value="true" />
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyle_ScrollBarLineRight" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}" />
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}" />
            <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="Black"
                                BorderThickness="0,1">
                            <ed:RegularPolygon Width="8"
                                               Height="6"
                                               Margin="5,0,0,0"
                                               HorizontalAlignment="Left"
                                               VerticalAlignment="Center"
                                               Fill="Black"
                                               InnerRadius="1"
                                               PointCount="3"
                                               RenderTransformOrigin="0.5,0.5"
                                               Stretch="Fill">
                                <ed:RegularPolygon.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform Angle="90" />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </ed:RegularPolygon.RenderTransform>
                            </ed:RegularPolygon>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="true" />
                            <Trigger Property="ToggleButton.IsChecked" Value="true" />
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type ScrollBar}">
            <Setter Property="Background" Value="#FF303435" />
            <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="Bg"
                              Background="{TemplateBinding Background}"
                              SnapsToDevicePixels="true">
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                                <RowDefinition Height="0.00001*" />
                                <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                            </Grid.RowDefinitions>
                            <Button Background="#FF303435"
                                    BorderBrush="{x:Null}"
                                    BorderThickness="0.5"
                                    Command="{x:Static ScrollBar.LineUpCommand}"
                                    IsEnabled="{TemplateBinding IsMouseOver}"
                                    Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="UpArrow"
                                    Style="{DynamicResource ButtonStyle_ScrollBarLineUp}" />
                            <Track x:Name="PART_Track"
                                   Grid.Row="1"
                                   IsDirectionReversed="true"
                                   IsEnabled="{TemplateBinding IsMouseOver}">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource VerticalScrollBarPageButton}" />
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource VerticalScrollBarPageButton}" />
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="VerticalGripper" Style="{StaticResource ScrollBarThumb}" />
                                </Track.Thumb>
                            </Track>
                            <Button x:Name="repeatButton"
                                    Grid.Row="2"
                                    Margin="0,0,0,-1"
                                    Background="#FF303435"
                                    BorderBrush="{x:Null}"
                                    BorderThickness="0.5"
                                    Command="{x:Static ScrollBar.LineDownCommand}"
                                    IsEnabled="{TemplateBinding IsMouseOver}"
                                    Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="DownArrow"
                                    Style="{DynamicResource ButtonStyle_ScrollBarLineDown}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Bg" Property="Background" Value="Gray" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Width" Value="Auto" />
                    <Setter Property="MinWidth" Value="0" />
                    <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                    <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />

                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ScrollBar}">
                                <Grid x:Name="Bg"
                                      Background="{TemplateBinding Background}"
                                      SnapsToDevicePixels="true">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                        <ColumnDefinition Width="0.00001*" />
                                        <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                    </Grid.ColumnDefinitions>
                                    <Button Background="#FF303435"
                                            BorderBrush="{x:Null}"
                                            BorderThickness="0.5"
                                            Command="{x:Static ScrollBar.LineLeftCommand}"
                                            IsEnabled="{TemplateBinding IsMouseOver}"
                                            Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="LeftArrow"
                                            Style="{DynamicResource ButtonStyle_ScrollBarLineLeft}" />
                                    <Track x:Name="PART_Track"
                                           Grid.Column="1"
                                           IsEnabled="{TemplateBinding IsMouseOver}">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource HorizontalScrollBarPageButton}" />
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource HorizontalScrollBarPageButton}" />
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="HorizontalGripper" Style="{StaticResource ScrollBarThumbv}" />
                                        </Track.Thumb>
                                    </Track>
                                    <Button Grid.Column="2"
                                            Background="#FF303435"
                                            BorderBrush="{x:Null}"
                                            BorderThickness="0.5"
                                            Command="{x:Static ScrollBar.LineRightCommand}"
                                            IsEnabled="{TemplateBinding IsMouseOver}"
                                            Microsoft_Windows_Themes:ScrollChrome.ScrollGlyph="RightArrow"
                                            Style="{DynamicResource ButtonStyle_ScrollBarLineRight}" />
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter TargetName="Bg" Property="Background" Value="gray" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ButtonStyle_ScrollBarLineDown" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource SButtonFocusVisual}" />
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}" />
            <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="Black"
                                BorderThickness="0,0.5">
                            <ed:RegularPolygon Width="8"
                                               Height="6"
                                               Margin="5,0,0,0"
                                               HorizontalAlignment="Left"
                                               VerticalAlignment="Center"
                                               Fill="Black"
                                               InnerRadius="1"
                                               PointCount="3"
                                               RenderTransformOrigin="0.5,0.5"
                                               Stretch="Fill">
                                <ed:RegularPolygon.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform Angle="180" />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </ed:RegularPolygon.RenderTransform>
                            </ed:RegularPolygon>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="true" />
                            <Trigger Property="ToggleButton.IsChecked" Value="true" />
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ItemsPanelTemplate x:Key="ItemsPanelTemplate_GuideTwo_ReceiveSize">
            <StackPanel Background="#FF4B4B4B" IsItemsHost="True" />
        </ItemsPanelTemplate>
        <Style x:Key="ComboBoxItemStyle_GuideTwo_ReceiveSize" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="Padding" Value="3,0,3,0" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border x:Name="Bd"
                                Width="Auto"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="true">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                <!--<Setter Property="Width" TargetName="Bd" Value="255"/>-->
                                <Setter TargetName="Bd" Property="Background" Value="#FF373B3C" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <DataTemplate x:Key="DataTemplate_GuideTwo_ReceiveSize">
            <Grid Width="Auto">
                <TextBlock Margin="0"
                           Foreground="#FFDCDCDC"
                           Text="{Binding DisplayName}"
                           TextWrapping="Wrap"
                           d:LayoutOverrides="Width, Height" />
            </Grid>
        </DataTemplate>

        <Style x:Key="CComboBoxFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="4,4,21,4"
                                   SnapsToDevicePixels="true"
                                   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="1" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="CButtonNormalBackground" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Offset="0" Color="#F3F3F3" />
            <GradientStop Offset="0.5" Color="#EBEBEB" />
            <GradientStop Offset="0.5" Color="#DDDDDD" />
            <GradientStop Offset="1" Color="#CDCDCD" />
        </LinearGradientBrush>
        <SolidColorBrush x:Key="CButtonNormalBorder" Color="#FF707070" />
        <Style x:Key="ComboBoxStyle_GuideTwo" TargetType="{x:Type ComboBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource CComboBoxFocusVisual}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
            <Setter Property="Background" Value="{StaticResource CButtonNormalBackground}" />
            <Setter Property="BorderBrush" Value="{StaticResource CButtonNormalBorder}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="Padding" Value="4,3" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="ScrollViewer.PanningMode" Value="Both" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                            </Grid.ColumnDefinitions>
                            <Popup x:Name="PART_Popup"
                                   Grid.ColumnSpan="2"
                                   Margin="1"
                                   AllowsTransparency="true"
                                   IsOpen="{Binding IsDropDownOpen,
                                                    RelativeSource={RelativeSource TemplatedParent}}"
                                   Placement="Bottom"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                                <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw"
                                                                                 MinWidth="{Binding ActualWidth,
                                                                                                    ElementName=MainGrid}"
                                                                                 MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                                                                 Color="Transparent">
                                    <Border x:Name="DropDownBorder"
                                            Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                                            BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                                            BorderThickness="1">
                                        <ScrollViewer x:Name="DropDownScrollViewer">
                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas Width="0"
                                                        Height="0"
                                                        HorizontalAlignment="Left"
                                                        VerticalAlignment="Top">
                                                    <Rectangle x:Name="OpaqueRect"
                                                               Width="{Binding ActualWidth,
                                                                               ElementName=DropDownBorder}"
                                                               Height="{Binding ActualHeight,
                                                                                ElementName=DropDownBorder}"
                                                               Fill="{Binding Background,
                                                                              ElementName=DropDownBorder}" />
                                                </Canvas>
                                                <ItemsPresenter x:Name="ItemsPresenter"
                                                                KeyboardNavigation.DirectionalNavigation="Contained"
                                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Microsoft_Windows_Themes:SystemDropShadowChrome>
                            </Popup>
                            <ToggleButton Grid.ColumnSpan="2"
                                          Background="{TemplateBinding Background}"
                                          BorderBrush="{TemplateBinding BorderBrush}"
                                          Foreground="#FFDCDCDC"
                                          IsChecked="{Binding IsDropDownOpen,
                                                              Mode=TwoWay,
                                                              RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{DynamicResource ComboBoxReadonlyToggleButton}" />
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding SelectionBoxItem}"
                                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              IsHitTestVisible="false"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                                <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                                <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="Height" Value="95" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                <Setter Property="Background" Value="#FFF4F4F4" />
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                            </Trigger>
                            <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEditable" Value="true">
                    <Setter Property="BorderBrush" Value="{StaticResource TextBoxBorder}" />
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
                    <Setter Property="IsTabStop" Value="false" />
                    <Setter Property="Padding" Value="3" />
                    <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Geometry x:Key="CDownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>
        <Style x:Key="ComboBoxReadonlyToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="ClickMode" Value="Press" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid Width="Auto" Background="{TemplateBinding Background}">
                            <Grid Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                  HorizontalAlignment="Right"
                                  Background="{TemplateBinding Background}">
                                <Path x:Name="Arrow"
                                      Margin="3,1,0,0"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="{StaticResource CDownArrowGeometry}"
                                      Fill="Black" />
                            </Grid>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type ComboBox}">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Offset="0" Color="#FF616161" />
                        <GradientStop Offset="1" Color="#FF585858" />
                        <GradientStop Offset="0.495" Color="#FF616161" />
                        <GradientStop Offset="0.5" Color="#FE585858" />
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="MyToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border"
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}"
                                Background="{TemplateBinding Background}">
                            <TextBlock HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Foreground="WhiteSmoke"
                                       Text="{TemplateBinding Content}"
                                       TextWrapping="Wrap" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--<Trigger Property="IsKeyboardFocused" Value="true"/>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Width" TargetName="border" Value="25"/>
                                <Setter Property="Height" TargetName="border" Value="25"/>
                                <Setter Property="Background" TargetName="border" Value="Silver"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter Property="Background" TargetName="border" Value="#FFB0D1F6"/>
                                <Setter Property="Width" TargetName="border" Value="25"/>
                                <Setter Property="Height" TargetName="border" Value="25"/>
                            </Trigger>-->
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid x:Name="grid">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger SourceName="grid" Property="IsEnabled" Value="True">
                                <Setter TargetName="grid" Property="Background" Value="#FFEF8E8E" />
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="Sty_LangMenuItem" TargetType="{x:Type MenuItem}">
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="ScrollViewer.PanningMode" Value="Both" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="MenuItem.Command" Value="{Binding DataContext.CmdChangedLang, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Menu}}}" />
            <Setter Property="MenuItem.CommandParameter" Value="{Binding LangFlag}" />
            <Setter Property="MenuItem.IsChecked" Value="{Binding IsSelected}" />
            <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
            <Style.Triggers>
                <Trigger Property="Role" Value="TopLevelHeader">
                    <Setter Property="Padding" Value="7,2,8,3" />
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                </Trigger>
                <Trigger Property="Role" Value="TopLevelItem">
                    <Setter Property="Padding" Value="7,2,8,3" />
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                </Trigger>
                <Trigger Property="Role" Value="SubmenuHeader">
                    <Setter Property="Padding" Value="2,3,2,3" />
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                </Trigger>
                <Trigger Property="Role" Value="SubmenuItem">
                    <Setter Property="Padding" Value="2,3,2,3" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <DataTemplate x:Key="DT_LangItem">
            <Grid Width="Auto">
                <TextBlock x:Name="myl"
                           Margin="0,0,1.333,0.163"
                           Text="{Binding LangDisplayName}"
                           TextWrapping="Wrap"
                           d:LayoutOverrides="Width, Height" />
            </Grid>
        </DataTemplate>
        <LinearGradientBrush x:Key="MenuItemSelectionFill" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Offset="0" Color="#34C5EBFF" />
            <GradientStop Offset="1" Color="#3481D8FF" />
        </LinearGradientBrush>
        <Geometry x:Key="Checkmark">M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z</Geometry>
        <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
            <Grid SnapsToDevicePixels="true">
                <Rectangle x:Name="Bg"
                           Fill="{TemplateBinding Background}"
                           RadiusX="2"
                           RadiusY="2"
                           Stroke="{TemplateBinding BorderBrush}"
                           StrokeThickness="1" />
                <Rectangle x:Name="InnerBorder"
                           Margin="1"
                           RadiusX="2"
                           RadiusY="2" />
                <Grid x:Name="grid">
                    <Grid.Background>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Offset="0" Color="#FF818181" />
                            <GradientStop Offset="1" Color="#FF818181" />
                            <GradientStop Offset="0.005" Color="#FF818181" />
                            <GradientStop Offset="0.01" Color="#FF4F4F4F" />
                            <GradientStop Offset="0.995" Color="#FF818181" />
                            <GradientStop Offset="0.99" Color="#FF4F4F4F" />
                        </LinearGradientBrush>
                    </Grid.Background>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"
                                          MinWidth="24"
                                          SharedSizeGroup="MenuItemIconColumnGroup" />
                        <ColumnDefinition Width="4" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="37" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                        <ColumnDefinition Width="17" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="Icon"
                                      Margin="1"
                                      VerticalAlignment="Center"
                                      ContentSource="Icon"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <Border x:Name="GlyphPanel"
                            Width="22"
                            Height="22"
                            Margin="1"
                            Background="#E6EFF4"
                            BorderBrush="{x:Null}"
                            BorderThickness="0"
                            CornerRadius="3"
                            Visibility="Hidden">
                        <Path x:Name="Glyph"
                              Width="9"
                              Height="11"
                              Data="{StaticResource Checkmark}"
                              Fill="#0C12A1"
                              FlowDirection="LeftToRight" />
                    </Border>
                    <ContentPresenter Grid.Column="2"
                                      Margin="{TemplateBinding Padding}"
                                      ContentSource="Header"
                                      OpacityMask="Black"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <TextBlock x:Name="textBlock"
                               Grid.Column="4"
                               Margin="{TemplateBinding Padding}"
                               Foreground="#FF9D9D9D"
                               Text="{TemplateBinding InputGestureText}" />
                </Grid>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsHighlighted" Value="true">
                    <Setter TargetName="Bg" Property="Fill" Value="{StaticResource MenuItemSelectionFill}" />
                    <Setter TargetName="Bg" Property="Stroke" Value="#8071CBF1" />
                    <Setter TargetName="InnerBorder" Property="Stroke" Value="#40FFFFFF" />
                    <Setter TargetName="grid" Property="Background" Value="#FF6E6E6E" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="#FF9D9D9D" />
                    <Setter TargetName="GlyphPanel" Property="Background" Value="#EEE9E9" />
                    <Setter TargetName="GlyphPanel" Property="BorderBrush" Value="#DBD6D6" />
                    <Setter TargetName="Glyph" Property="Fill" Value="#848589" />
                    <Setter TargetName="textBlock" Property="Foreground" Value="#FF9D9D9D" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <LinearGradientBrush x:Key="MenuItemPressedFill" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Offset="0" Color="#28717070" />
            <GradientStop Offset="0.75" Color="#50717070" />
            <GradientStop Offset="1" Color="#90717070" />
        </LinearGradientBrush>
        <SolidColorBrush x:Key="SubMenuBackgroundBrush" Color="#FFF5F5F5" />
        <Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
        <Style x:Key="MenuScrollButton"
               BasedOn="{x:Null}"
               TargetType="{x:Type RepeatButton}">
            <Setter Property="ClickMode" Value="Hover" />
            <Setter Property="MinWidth" Value="0" />
            <Setter Property="MinHeight" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <DockPanel Background="Transparent" SnapsToDevicePixels="true">
                            <Rectangle x:Name="R1"
                                       Width="1"
                                       DockPanel.Dock="Right"
                                       Fill="Transparent" />
                            <Rectangle x:Name="B1"
                                       Height="1"
                                       DockPanel.Dock="Bottom"
                                       Fill="Transparent" />
                            <Rectangle x:Name="L1"
                                       Width="1"
                                       DockPanel.Dock="Left"
                                       Fill="Transparent" />
                            <Rectangle x:Name="T1"
                                       Height="1"
                                       DockPanel.Dock="Top"
                                       Fill="Transparent" />
                            <ContentPresenter x:Name="ContentContainer"
                                              Margin="2,2,2,2"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center" />
                        </DockPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="R1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                                <Setter TargetName="B1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                                <Setter TargetName="L1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                                <Setter TargetName="T1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                                <Setter TargetName="ContentContainer" Property="Margin" Value="3,3,1,1" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />
        <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
        <Style x:Key="{ComponentResourceKey ResourceId=MenuScrollViewer,
                                            TypeInTargetAssembly={x:Type FrameworkElement}}"
               BasedOn="{x:Null}"
               TargetType="{x:Type ScrollViewer}">
            <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
            <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <RepeatButton Grid.Row="0"
                                          Grid.Column="0"
                                          Command="{x:Static ScrollBar.LineUpCommand}"
                                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                          Focusable="false"
                                          Style="{StaticResource MenuScrollButton}">
                                <RepeatButton.Visibility>
                                    <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                                  ConverterParameter="0"
                                                  FallbackValue="Visibility.Collapsed">
                                        <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </RepeatButton.Visibility>
                                <Path Data="{StaticResource UpArrow}" Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                            </RepeatButton>
                            <Border Grid.Row="1" Grid.Column="0">
                                <ScrollContentPresenter Margin="{TemplateBinding Padding}" />
                            </Border>
                            <RepeatButton Grid.Row="2"
                                          Grid.Column="0"
                                          Command="{x:Static ScrollBar.LineDownCommand}"
                                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                          Focusable="false"
                                          Style="{StaticResource MenuScrollButton}">
                                <RepeatButton.Visibility>
                                    <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                                  ConverterParameter="100"
                                                  FallbackValue="Visibility.Collapsed">
                                        <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </RepeatButton.Visibility>
                                <Path Data="{StaticResource DownArrow}" Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                            </RepeatButton>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}" TargetType="{x:Type ContentControl}">
            <Border Background="{StaticResource SubMenuBackgroundBrush}"
                    BorderBrush="#FF959595"
                    BorderThickness="1">
                <Grid>
                    <Rectangle Width="28"
                               Margin="2"
                               HorizontalAlignment="Left"
                               Fill="#F1F1F1"
                               RadiusX="2"
                               RadiusY="2" />
                    <Rectangle Width="1"
                               Margin="30,2,0,2"
                               HorizontalAlignment="Left"
                               Fill="#E2E3E3" />
                    <Rectangle Width="1"
                               Margin="31,2,0,2"
                               HorizontalAlignment="Left"
                               Fill="White" />
                    <ContentPresenter Grid.ColumnSpan="2" Margin="1,0" />
                </Grid>
            </Border>
        </ControlTemplate>
        <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
            <Grid SnapsToDevicePixels="true">
                <Rectangle x:Name="OuterBorder"
                           RadiusX="2"
                           RadiusY="2" />
                <Rectangle x:Name="Bg"
                           Margin="1"
                           Fill="{TemplateBinding Background}"
                           RadiusX="1"
                           RadiusY="1"
                           Stroke="{TemplateBinding BorderBrush}"
                           StrokeThickness="1" />
                <Rectangle x:Name="InnerBorder" Margin="2" />
                <DockPanel>
                    <ContentPresenter x:Name="Icon"
                                      Margin="4,0,6,0"
                                      VerticalAlignment="Center"
                                      ContentSource="Icon"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <Path x:Name="GlyphPanel"
                          Margin="7,0,0,0"
                          VerticalAlignment="Center"
                          Data="{StaticResource Checkmark}"
                          Fill="{TemplateBinding Foreground}"
                          FlowDirection="LeftToRight"
                          Visibility="Collapsed" />
                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                      ContentSource="Header"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </DockPanel>
                <Popup x:Name="PART_Popup"
                       AllowsTransparency="true"
                       Focusable="false"
                       HorizontalOffset="1"
                       IsOpen="{Binding IsSubmenuOpen,
                                        RelativeSource={RelativeSource TemplatedParent}}"
                       Placement="Bottom"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       VerticalOffset="-1">
                    <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                        <ContentControl x:Name="SubMenuBorder"
                                        Foreground="White"
                                        IsTabStop="false"
                                        Template="{DynamicResource {ComponentResourceKey ResourceId=SubmenuContent,
                                                                                         TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <ScrollViewer x:Name="SubMenuScrollViewer"
                                          CanContentScroll="true"
                                          Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
                                                                                        TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas Width="0"
                                            Height="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top"
                                            Background="Black">
                                        <Rectangle Width="{Binding ActualWidth,
                                                                   ElementName=SubMenuBorder}"
                                                   Height="{Binding ActualHeight,
                                                                    ElementName=SubMenuBorder}"
                                                   Fill="#FF4F4F4F"
                                                   StrokeThickness="0" />
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter"
                                                    Margin="2"
                                                    Grid.IsSharedSizeScope="true"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Grid>
                            </ScrollViewer>
                        </ContentControl>
                    </Microsoft_Windows_Themes:SystemDropShadowChrome>
                </Popup>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                    <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                </Trigger>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                    <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                    <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
                </Trigger>
                <Trigger Property="IsHighlighted" Value="true">
                    <Setter TargetName="Bg" Property="Stroke" Value="#90717070" />
                    <Setter TargetName="OuterBorder" Property="Stroke" Value="#50FFFFFF" />
                    <Setter TargetName="InnerBorder" Property="Stroke" Value="#50FFFFFF" />
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                    <Setter TargetName="Bg" Property="Stroke" Value="#E0717070" />
                    <Setter TargetName="Bg" Property="Fill" Value="{StaticResource MenuItemPressedFill}" />
                    <Setter TargetName="InnerBorder" Property="Stroke" Value="#50747272" />
                </Trigger>
                <Trigger Property="IsSubmenuOpen" Value="true">
                    <Setter TargetName="Bg" Property="Stroke" Value="#E0717070" />
                    <Setter TargetName="Bg" Property="Fill" Value="{StaticResource MenuItemPressedFill}" />
                    <Setter TargetName="InnerBorder" Property="Stroke" Value="#50747272" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="#FF9A9A9A" />
                    <Setter TargetName="GlyphPanel" Property="Fill" Value="#848589" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
            <Grid SnapsToDevicePixels="true">
                <Rectangle x:Name="OuterBorder"
                           RadiusX="2"
                           RadiusY="2" />
                <Rectangle x:Name="Bg"
                           Margin="1"
                           Fill="{TemplateBinding Background}"
                           RadiusX="1"
                           RadiusY="1"
                           Stroke="{TemplateBinding BorderBrush}"
                           StrokeThickness="1" />
                <Rectangle x:Name="InnerBorder" Margin="2" />
                <DockPanel>
                    <ContentPresenter x:Name="Icon"
                                      Margin="4,0,6,0"
                                      VerticalAlignment="Center"
                                      ContentSource="Icon"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <Path x:Name="GlyphPanel"
                          Margin="7,0,0,0"
                          VerticalAlignment="Center"
                          Data="{StaticResource Checkmark}"
                          Fill="{TemplateBinding Foreground}"
                          FlowDirection="LeftToRight"
                          Visibility="Collapsed" />
                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                      ContentSource="Header"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </DockPanel>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsHighlighted" Value="true">
                    <Setter TargetName="Bg" Property="Stroke" Value="#90717070" />
                    <Setter TargetName="OuterBorder" Property="Stroke" Value="#50FFFFFF" />
                    <Setter TargetName="InnerBorder" Property="Stroke" Value="#50FFFFFF" />
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                    <Setter TargetName="Bg" Property="Stroke" Value="#E0717070" />
                    <Setter TargetName="Bg" Property="Fill" Value="{StaticResource MenuItemPressedFill}" />
                    <Setter TargetName="InnerBorder" Property="Stroke" Value="#50747272" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="#FF9A9A9A" />
                    <Setter TargetName="GlyphPanel" Property="Fill" Value="#848589" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
        <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
            <Grid SnapsToDevicePixels="true">
                <Rectangle x:Name="Bg"
                           Fill="{TemplateBinding Background}"
                           RadiusX="2"
                           RadiusY="2"
                           Stroke="{TemplateBinding BorderBrush}"
                           StrokeThickness="1" />
                <Rectangle x:Name="InnerBorder"
                           Margin="1"
                           RadiusX="2"
                           RadiusY="2"
                           Stroke="Transparent"
                           StrokeThickness="1" />
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"
                                          MinWidth="24"
                                          SharedSizeGroup="MenuItemIconColumnGroup" />
                        <ColumnDefinition Width="4" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="37" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                        <ColumnDefinition Width="17" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="Icon"
                                      Margin="1"
                                      VerticalAlignment="Center"
                                      ContentSource="Icon"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <Border x:Name="GlyphPanel"
                            Width="22"
                            Height="22"
                            Margin="1"
                            Background="#E6EFF4"
                            BorderBrush="#CDD3E6"
                            BorderThickness="1"
                            CornerRadius="3"
                            Visibility="Hidden">
                        <Path x:Name="Glyph"
                              Width="9"
                              Height="11"
                              Data="{StaticResource Checkmark}"
                              Fill="#0C12A1"
                              FlowDirection="LeftToRight" />
                    </Border>
                    <ContentPresenter Grid.Column="2"
                                      Margin="{TemplateBinding Padding}"
                                      ContentSource="Header"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <TextBlock Grid.Column="4"
                               Margin="{TemplateBinding Padding}"
                               Text="{TemplateBinding InputGestureText}"
                               Visibility="Collapsed" />
                    <Path Grid.Column="5"
                          Margin="4,0,0,0"
                          VerticalAlignment="Center"
                          Data="{StaticResource RightArrow}"
                          Fill="{TemplateBinding Foreground}" />
                </Grid>
                <Popup x:Name="PART_Popup"
                       AllowsTransparency="true"
                       Focusable="false"
                       HorizontalOffset="-2"
                       IsOpen="{Binding IsSubmenuOpen,
                                        RelativeSource={RelativeSource TemplatedParent}}"
                       Placement="Right"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       VerticalOffset="-3">
                    <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                        <ContentControl x:Name="SubMenuBorder"
                                        IsTabStop="false"
                                        Template="{DynamicResource {ComponentResourceKey ResourceId=SubmenuContent,
                                                                                         TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <ScrollViewer x:Name="SubMenuScrollViewer"
                                          CanContentScroll="true"
                                          Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
                                                                                        TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas Width="Auto"
                                            Height="Auto"
                                            HorizontalAlignment="Stretch"
                                            VerticalAlignment="Stretch"
                                            Background="#FF4F4F4F">
                                        <Rectangle Width="{Binding ActualWidth,
                                                                   ElementName=SubMenuBorder}"
                                                   Height="{Binding ActualHeight,
                                                                    ElementName=SubMenuBorder}"
                                                   Fill="#FF4F4F4F" />
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter"
                                                    Margin="2"
                                                    Grid.IsSharedSizeScope="true"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Grid>
                            </ScrollViewer>
                        </ContentControl>
                    </Microsoft_Windows_Themes:SystemDropShadowChrome>
                </Popup>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                    <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                </Trigger>
                <Trigger Property="IsHighlighted" Value="true">
                    <Setter TargetName="InnerBorder" Property="Stroke" Value="#D1DBF4FF" />
                </Trigger>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                    <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                    <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
                </Trigger>
                <Trigger Property="IsHighlighted" Value="true">
                    <Setter TargetName="Bg" Property="Fill" Value="{StaticResource MenuItemSelectionFill}" />
                    <Setter TargetName="Bg" Property="Stroke" Value="#8571CBF1" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="#FF9A9A9A" />
                    <Setter TargetName="GlyphPanel" Property="Background" Value="#EEE9E9" />
                    <Setter TargetName="GlyphPanel" Property="BorderBrush" Value="#DBD6D6" />
                    <Setter TargetName="Glyph" Property="Fill" Value="#848589" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <SolidColorBrush x:Key="ToolBarButtonHoverBorder" Color="#3399FF" />
        <SolidColorBrush x:Key="ToolBarButtonHover" Color="#C2E0FF" />
        <SolidColorBrush x:Key="ToolBarButtonPressedBorder" Color="#3399FF" />
        <SolidColorBrush x:Key="ToolBarButtonPressed" Color="#99CCFF" />
        <Style x:Key="CommonButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true" />
                            <Trigger Property="IsKeyboardFocused" Value="true" />
                            <Trigger Property="IsPressed" Value="true" />
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ToolButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Width="24"
                                Height="24"
                                Background="{TemplateBinding Background}"
                                BorderBrush="Black"
                                BorderThickness="0" />
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true" />
                            <Trigger Property="IsKeyboardFocused" Value="true" />
                            <Trigger Property="IsPressed" Value="true" />
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="CommonBigButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Width="40"
                                Height="40"
                                Background="{TemplateBinding Background}"
                                BorderBrush="Black"
                                BorderThickness="0" />
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true" />
                            <Trigger Property="IsKeyboardFocused" Value="true" />
                            <Trigger Property="IsPressed" Value="true" />
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type localInterface:WarnControl}">
            <Setter Property="IsOverLoad" Value="{Binding IsOverLoad, Mode=TwoWay}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type localInterface:WarnControl}">
                        <Canvas x:Name="warmborder"
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}"
                                Background="{TemplateBinding Background}" />
                    </ControlTemplate>

                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type localInterface:MyTreeViewSenderButton}">
            <Setter Property="IsOverLoad" Value="{Binding IsOverLoad, Mode=TwoWay}" />
            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type localInterface:MyTreeViewSenderButton}">
                        <Grid>
                            <Button Name="mySender"
                                    Width="{x:Static localInterface:SmartLCTViewModeBase.SenderMaxLoadSize}"
                                    Height="18"
                                    HorizontalAlignment="Left"
                                    Background="#FF303435"
                                    BorderBrush="#FF514D4E"
                                    BorderThickness="0.5"
                                    Command="{Binding CmdSelectedTreeViewValueWithSender,
                                                      Source={StaticResource MainWindow_VMDataSource}}"
                                    CommandParameter="{Binding}"
                                    Style="{DynamicResource CommonButtonStyle}" />
                            <Button Name="mySenderLoad"
                                    Height="18"
                                    HorizontalAlignment="Left"
                                    Background="#FF23A9C2"
                                    BorderBrush="#FF514D4E"
                                    BorderThickness="0.5,0.5,0,0.5"
                                    Command="{Binding CmdSelectedTreeViewValueWithSender,
                                                      Source={StaticResource MainWindow_VMDataSource}}"
                                    CommandParameter="{Binding}"
                                    Style="{DynamicResource CommonButtonStyle}">
                                <Button.Width>
                                    <MultiBinding Converter="{StaticResource senderRectConvertArea}" ConverterParameter="senderPara">
                                        <Binding Path="MaxLoadArea" />
                                        <Binding Path="LoadSize" />
                                    </MultiBinding>
                                </Button.Width>
                            </Button>
                            <TextBlock Canvas.Left="230"
                                       Canvas.Top="0"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Foreground="White"
                                       Text="{Binding SenderIndex,
                                                      Converter={StaticResource senderIndexConvertSenderName}}" />

                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="mySender" Property="BorderBrush" Value="#FFA0A0A0" />
                                <Setter TargetName="mySender" Property="BorderThickness" Value="1" />
                                <Setter TargetName="mySenderLoad" Property="BorderBrush" Value="#FFA0A0A0" />
                                <Setter TargetName="mySenderLoad" Property="BorderThickness" Value="1,1,0,1" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="mySender" Property="BorderBrush" Value="#FFA0A0A0" />
                                <Setter TargetName="mySender" Property="BorderThickness" Value="1" />
                                <Setter TargetName="mySender" Property="Background" Value="#FF1F1F1F" />
                                <Setter TargetName="mySenderLoad" Property="BorderBrush" Value="#FFA0A0A0" />
                                <Setter TargetName="mySenderLoad" Property="BorderThickness" Value="1,1,0,1" />
                            </Trigger>
                            <Trigger Property="IsOverLoad" Value="True">
                                <Setter TargetName="mySender" Property="Background" Value="#FFFC3A3A" />
                                <Setter TargetName="mySenderLoad" Property="Background" Value="#FFFC3A3A" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>


                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type localInterface:MyTreeViewPortButton}">
            <Setter Property="IsOverLoad" Value="{Binding IsOverLoad, Mode=TwoWay}" />
            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type localInterface:MyTreeViewPortButton}">
                        <Grid>
                            <Button Name="myPort"
                                    Width="{x:Static localInterface:SmartLCTViewModeBase.PortMaxLoadSize}"
                                    Height="18"
                                    HorizontalAlignment="Left"
                                    Background="#FF303435"
                                    BorderBrush="#FF514D4E"
                                    BorderThickness="0.5"
                                    Command="{Binding CmdSelectedTreeViewValueWithPort,
                                                      Source={StaticResource MainWindow_VMDataSource}}"
                                    CommandParameter="{Binding}"
                                    Style="{DynamicResource CommonButtonStyle}" />
                            <Button Name="myPortLoad"
                                    Height="18"
                                    HorizontalAlignment="Left"
                                    Background="#FF23A9C2"
                                    BorderBrush="#FF514D4E"
                                    BorderThickness="0.5,0.5,0,0.5"
                                    Command="{Binding CmdSelectedTreeViewValueWithPort,
                                                      Source={StaticResource MainWindow_VMDataSource}}"
                                    CommandParameter="{Binding}"
                                    Style="{DynamicResource CommonButtonStyle}">
                                <Button.Width>
                                    <MultiBinding Converter="{StaticResource portRectConvertArea}" ConverterParameter="portPara">
                                        <Binding Path="MaxLoadArea" />
                                        <Binding Path="LoadSize" />
                                    </MultiBinding>
                                </Button.Width>
                            </Button>
                            <TextBlock Canvas.Left="230"
                                       Canvas.Top="0"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Foreground="White"
                                       Text="{Binding PortIndex,
                                                      Converter={StaticResource portIndexConvertPortName}}" />

                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="myPort" Property="BorderBrush" Value="#FFA0A0A0" />
                                <Setter TargetName="myPort" Property="BorderThickness" Value="1" />
                                <Setter TargetName="myPortLoad" Property="BorderBrush" Value="#FFA0A0A0" />
                                <Setter TargetName="myPortLoad" Property="BorderThickness" Value="1,1,0,1" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="myPort" Property="BorderBrush" Value="#FFA0A0A0" />
                                <Setter TargetName="myPort" Property="BorderThickness" Value="1" />
                                <Setter TargetName="myPort" Property="Background" Value="#FF1F1F1F" />
                                <Setter TargetName="myPortLoad" Property="BorderBrush" Value="#FFA0A0A0" />
                                <Setter TargetName="myPortLoad" Property="BorderThickness" Value="1,1,0,1" />
                            </Trigger>
                            <Trigger Property="IsOverLoad" Value="True">
                                <Setter TargetName="myPort" Property="Background" Value="#FFFC3A3A" />
                                <Setter TargetName="myPortLoad" Property="Background" Value="#FFFC3A3A" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>


                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TabControlScreenButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="Red" />
            <Setter Property="BorderBrush" Value="red" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border"
                                Background="{x:Null}"
                                BorderBrush="Black"
                                BorderThickness="0">
                            <TextBlock HorizontalAlignment="Left"
                                       VerticalAlignment="Center"
                                       Background="{x:Null}"
                                       Foreground="White"
                                       Text="{TemplateBinding Content}"
                                       TextWrapping="Wrap" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#FF818181" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TabItemFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="3,3,3,1"
                                   SnapsToDevicePixels="true"
                                   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="1" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="TabControlNormalBorderBrush" Color="#8C8E94" />
        <LinearGradientBrush x:Key="ButtonNormalBackground" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Offset="0" Color="#F3F3F3" />
            <GradientStop Offset="0.5" Color="#EBEBEB" />
            <GradientStop Offset="0.5" Color="#DDDDDD" />
            <GradientStop Offset="1" Color="#CDCDCD" />
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="TabItemHotBackground" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Offset="0.15" Color="#EAF6FD" />
            <GradientStop Offset=".5" Color="#D9F0FC" />
            <GradientStop Offset=".5" Color="#BEE6FD" />
            <GradientStop Offset="1" Color="#A7D9F5" />
        </LinearGradientBrush>
        <SolidColorBrush x:Key="TabItemSelectedBackground" Color="#F9F9F9" />
        <SolidColorBrush x:Key="TabItemHotBorderBrush" Color="#3C7FB1" />
        <SolidColorBrush x:Key="TabItemDisabledBackground" Color="#F4F4F4" />
        <SolidColorBrush x:Key="TabItemDisabledBorderBrush" Color="#FFC9C7BA" />
        <Style x:Key="MenuItemStyleParent" TargetType="{x:Type MenuItem}">
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="ScrollViewer.PanningMode" Value="Both" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
            <Style.Triggers>
                <Trigger Property="Role" Value="TopLevelHeader">
                    <Setter Property="Padding" Value="7,2,8,3" />
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                </Trigger>
                <Trigger Property="Role" Value="TopLevelItem">
                    <Setter Property="Padding" Value="7,2,8,3" />
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                </Trigger>
                <Trigger Property="Role" Value="SubmenuHeader">
                    <Setter Property="Padding" Value="2,3,2,3" />
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                </Trigger>
                <Trigger Property="Role" Value="SubmenuItem">
                    <Setter Property="Padding" Value="2,3,2,3" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type MenuItem}">
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="ScrollViewer.PanningMode" Value="Both" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
            <Style.Triggers>
                <Trigger Property="Role" Value="TopLevelHeader">
                    <Setter Property="Padding" Value="7,2,8,3" />
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                </Trigger>
                <Trigger Property="Role" Value="TopLevelItem">
                    <Setter Property="Padding" Value="7,2,8,3" />
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                </Trigger>
                <Trigger Property="Role" Value="SubmenuHeader">
                    <Setter Property="Padding" Value="2,3,2,3" />
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                </Trigger>
                <Trigger Property="Role" Value="SubmenuItem">
                    <Setter Property="Padding" Value="2,3,2,3" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="TabControlStyle_MainWinow_Environment" TargetType="{x:Type TabControl}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Padding" Value="4,4,4,4" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="{StaticResource TabControlNormalBorderBrush}" />
            <Setter Property="Background" Value="#F9F9F9" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid ClipToBounds="true"
                              KeyboardNavigation.TabNavigation="Local"
                              SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="ColumnDefinition0" />
                                <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                                <RowDefinition x:Name="RowDefinition1" Height="*" />
                            </Grid.RowDefinitions>
                            <Border x:Name="ContentPanel"
                                    Grid.Row="0"
                                    Grid.RowSpan="2"
                                    Grid.Column="0"
                                    Margin="0.8,3.3,0,0"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    KeyboardNavigation.TabIndex="2"
                                    KeyboardNavigation.TabNavigation="Local">
                                <ContentPresenter x:Name="PART_SelectedContentHost"
                                                  Margin="{TemplateBinding Padding}"
                                                  ContentSource="SelectedContent"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <TabPanel x:Name="HeaderPanel"
                                      Grid.Row="1"
                                      Grid.Column="0"
                                      Width="23"
                                      Height="Auto"
                                      Margin="2,0,0,238.2"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Stretch"
                                      Panel.ZIndex="1"
                                      IsItemsHost="true"
                                      KeyboardNavigation.TabIndex="1"
                                      d:LayoutOverrides="VerticalMargin" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="TabStripPlacement" Value="Bottom">
                                <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1" />
                                <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                                <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                                <Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
                                <Setter TargetName="HeaderPanel" Property="Margin" Value="2,0,2,2" />
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Left">
                                <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
                                <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                                <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="0" />
                                <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1" />
                                <Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
                                <Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
                                <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                                <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                                <Setter TargetName="HeaderPanel" Property="Margin" Value="2,2,0,2" />
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Right">
                                <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
                                <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                                <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="1" />
                                <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0" />
                                <Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
                                <Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
                                <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                                <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                                <Setter TargetName="HeaderPanel" Property="Margin" Value="0,2,2,2" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TabItemStyle1" TargetType="{x:Type TabItem}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource TabItemFocusVisual}" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Padding" Value="6,1,6,1" />
            <Setter Property="BorderBrush" Value="{StaticResource TabControlNormalBorderBrush}" />
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="Stretch" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid SnapsToDevicePixels="true">
                            <Border x:Name="Bd"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="1,1,1,0"
                                    Padding="6,0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="#FFF3F3F3" />
                                        <GradientStop Offset="0.5" Color="#FFEBEBEB" />
                                        <GradientStop Offset="0.5" Color="#FFDDDDDD" />
                                        <GradientStop Offset="1" Color="#FFCDCDCD" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <ContentPresenter x:Name="Content"
                                                  Height="Auto"
                                                  VerticalAlignment="Center"
                                                  ContentSource="Header"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Bd" Property="Background">
                                    <Setter.Value>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Offset="0.15" Color="#EAF6FD" />
                                            <GradientStop Offset=".5" Color="#D9F0FC" />
                                            <GradientStop Offset=".5" Color="#BEE6FD" />
                                            <GradientStop Offset="1" Color="#A7D9F5" />
                                        </LinearGradientBrush>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter Property="Panel.ZIndex" Value="1" />
                                <Setter TargetName="Bd" Property="Background" Value="#FF8F8F8F" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="false" />
                                    <Condition Property="IsMouseOver" Value="true" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource TabItemHotBorderBrush}" />
                            </MultiTrigger>
                            <Trigger Property="TabStripPlacement" Value="Bottom">
                                <Setter TargetName="Bd" Property="BorderThickness" Value="1,0,1,1" />
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Left">
                                <Setter TargetName="Bd" Property="BorderThickness" Value="1,1,0,1" />
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Right">
                                <Setter TargetName="Bd" Property="BorderThickness" Value="0,1,1,1" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true" />
                                    <Condition Property="TabStripPlacement" Value="Top" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Margin" Value="-2,-2,-2,-1" />
                                <Setter TargetName="Content" Property="Margin" Value="0,0,0,1" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true" />
                                    <Condition Property="TabStripPlacement" Value="Bottom" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Margin" Value="-2,-1,-2,-2" />
                                <Setter TargetName="Content" Property="Margin" Value="0,1,0,0" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true" />
                                    <Condition Property="TabStripPlacement" Value="Left" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Margin" Value="-2,-2,-1,-2" />
                                <Setter TargetName="Content" Property="Margin" Value="0,0,1,0" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true" />
                                    <Condition Property="TabStripPlacement" Value="Right" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Margin" Value="-1,-2,-2,-2" />
                                <Setter TargetName="Content" Property="Margin" Value="1,0,0,0" />
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Bd" Property="Background" Value="{StaticResource TabItemDisabledBackground}" />
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource TabItemDisabledBorderBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TabControlStyle1" TargetType="{x:Type TabControl}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Padding" Value="4,4,4,4" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="{StaticResource TabControlNormalBorderBrush}" />
            <Setter Property="Background" Value="#F9F9F9" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid ClipToBounds="true"
                              KeyboardNavigation.TabNavigation="Local"
                              SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="ColumnDefinition0" />
                                <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                                <RowDefinition x:Name="RowDefinition1" Height="*" />
                            </Grid.RowDefinitions>
                            <TabPanel x:Name="HeaderPanel"
                                      Grid.Row="0"
                                      Grid.Column="0"
                                      Margin="2,2,2,0"
                                      Panel.ZIndex="1"
                                      IsItemsHost="true"
                                      KeyboardNavigation.TabIndex="1" />
                            <Border x:Name="ContentPanel"
                                    Grid.Row="1"
                                    Grid.Column="0"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    KeyboardNavigation.TabIndex="2"
                                    KeyboardNavigation.TabNavigation="Local">
                                <ContentPresenter x:Name="PART_SelectedContentHost"
                                                  Margin="{TemplateBinding Padding}"
                                                  ContentSource="SelectedContent"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="TabStripPlacement" Value="Bottom">
                                <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1" />
                                <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                                <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                                <Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
                                <Setter TargetName="HeaderPanel" Property="Margin" Value="2,0,2,2" />
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Left">
                                <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
                                <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                                <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="0" />
                                <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1" />
                                <Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
                                <Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
                                <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                                <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                                <Setter TargetName="HeaderPanel" Property="Margin" Value="2,2,0,2" />
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Right">
                                <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
                                <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                                <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="1" />
                                <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0" />
                                <Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
                                <Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
                                <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                                <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                                <Setter TargetName="HeaderPanel" Property="Margin" Value="0,2,2,2" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2"
                                   SnapsToDevicePixels="true"
                                   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="1" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070" />
        <Style x:Key="ButtonStyle_tabHeader" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}" />
            <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border VerticalAlignment="Stretch"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{x:Null}"
                                BorderThickness="0">
                            <TextBlock Margin="0"
                                       VerticalAlignment="Stretch"
                                       Background="{TemplateBinding Background}"
                                       Foreground="Gainsboro"
                                       Text="{TemplateBinding Content}"
                                       TextWrapping="Wrap" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="true" />
                            <Trigger Property="ToggleButton.IsChecked" Value="true" />
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <DataTemplate x:Key="DataTemplate_tabHeader">
            <Grid Width="Auto"
                  Height="Auto"
                  Margin="0"
                  VerticalAlignment="Stretch"
                  Background="{x:Null}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="3*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Button Margin="6,0"
                        HorizontalAlignment="Stretch"
                        Background="{x:Null}"
                        Command="{Binding CmdNewLayer,
                                          Source={StaticResource MainWindow_VMDataSource}}"
                        CommandParameter="{Binding}"
                        Content="{Binding DisplayName,
                                          Mode=TwoWay}"
                        Style="{DynamicResource ButtonStyle_tabHeader}"
                        d:LayoutOverrides="Height" />
                <Button Width="6"
                        HorizontalAlignment="Left"
                        Background="{x:Null}"
                        Command="{Binding CmdNewLayer,
                                          Source={StaticResource MainWindow_VMDataSource}}"
                        CommandParameter="{Binding}"
                        Style="{DynamicResource ButtonStyle_tabHeader}"
                        d:LayoutOverrides="Height" />
                <Button Width="6"
                        Margin="0"
                        HorizontalAlignment="Right"
                        Background="{x:Null}"
                        BorderBrush="{x:Null}"
                        BorderThickness="0"
                        Command="{Binding CmdNewLayer,
                                          Source={StaticResource MainWindow_VMDataSource}}"
                        CommandParameter="{Binding}"
                        Content=""
                        Style="{DynamicResource ButtonStyle_tabHeader}"
                        d:LayoutOverrides="Height" />
                <Button Grid.Column="1"
                        Width="20"
                        Height="20"
                        Command="{Binding CmdDeleteLayer,
                                          Source={StaticResource MainWindow_VMDataSource}}"
                        CommandParameter="{Binding}"
                        Content="Button"
                        Style="{DynamicResource CommonButtonStyle}"
                        Visibility="{Binding ConnectedIndex,
                                             Converter={StaticResource connectIndexConvertDeleteBtVisible},
                                             Mode=TwoWay}">
                    <Button.Background>
                        <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/DeleteScreen.png" />
                    </Button.Background>
                    <i:Interaction.Behaviors>
                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                            <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                <ImageBrush />
                            </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                            <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/DeleteScreen.png" />
                            </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                            <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/DeleteScreen.png" />
                            </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                    </i:Interaction.Behaviors>
                </Button>
            </Grid>
            <DataTemplate.Triggers>
                <Trigger Property="ContentControl.Content" Value="{x:Null}" />
            </DataTemplate.Triggers>
        </DataTemplate>
        <ItemsPanelTemplate x:Key="ItemsPanelTemplate_tabHeader">
            <StackPanel IsItemsHost="True" />
        </ItemsPanelTemplate>
        <Style x:Key="TabControlStyle_tabHeader" TargetType="{x:Type TabControl}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Padding" Value="4,4,4,4" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="{StaticResource TabControlNormalBorderBrush}" />
            <Setter Property="Background" Value="#F9F9F9" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid ClipToBounds="true"
                              KeyboardNavigation.TabNavigation="Local"
                              SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="ColumnDefinition0" />
                                <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                                <RowDefinition x:Name="RowDefinition1" Height="*" />
                            </Grid.RowDefinitions>
                            <TabPanel x:Name="HeaderPanel"
                                      Grid.Row="0"
                                      Grid.Column="0"
                                      Margin="2,2,2,0"
                                      Panel.ZIndex="1"
                                      IsItemsHost="true"
                                      KeyboardNavigation.TabIndex="1" />
                            <Border x:Name="ContentPanel"
                                    Grid.Row="1"
                                    Grid.Column="0"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    KeyboardNavigation.TabIndex="2"
                                    KeyboardNavigation.TabNavigation="Local">
                                <ContentPresenter x:Name="PART_SelectedContentHost"
                                                  ContentSource="SelectedContent"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="TabStripPlacement" Value="Bottom">
                                <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1" />
                                <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                                <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                                <Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
                                <Setter TargetName="HeaderPanel" Property="Margin" Value="2,0,2,2" />
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Left">
                                <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
                                <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                                <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="0" />
                                <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1" />
                                <Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
                                <Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
                                <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                                <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                                <Setter TargetName="HeaderPanel" Property="Margin" Value="2,2,0,2" />
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Right">
                                <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
                                <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                                <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="1" />
                                <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0" />
                                <Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
                                <Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
                                <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                                <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                                <Setter TargetName="HeaderPanel" Property="Margin" Value="0,2,2,2" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ComponentResourceKey2" TargetType="{x:Type MenuItem}">
            <Grid SnapsToDevicePixels="true">
                <Rectangle x:Name="Bg"
                           Fill="{TemplateBinding Background}"
                           RadiusX="2"
                           RadiusY="2"
                           Stroke="{TemplateBinding BorderBrush}"
                           StrokeThickness="1" />
                <Rectangle x:Name="InnerBorder"
                           Margin="1"
                           RadiusX="2"
                           RadiusY="2" />
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"
                                          MinWidth="24"
                                          SharedSizeGroup="MenuItemIconColumnGroup" />
                        <ColumnDefinition Width="4" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="37" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                        <ColumnDefinition Width="17" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="Icon"
                                      Margin="1"
                                      VerticalAlignment="Center"
                                      ContentSource="Icon"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <Border x:Name="GlyphPanel"
                            Width="22"
                            Height="22"
                            Margin="1"
                            Background="#E6EFF4"
                            BorderBrush="#CDD3E6"
                            BorderThickness="1"
                            CornerRadius="3"
                            Visibility="Hidden">
                        <Path x:Name="Glyph"
                              Width="9"
                              Height="11"
                              Data="{StaticResource Checkmark}"
                              Fill="#0C12A1"
                              FlowDirection="LeftToRight" />
                    </Border>
                    <ContentPresenter Grid.Column="2"
                                      Margin="{TemplateBinding Padding}"
                                      ContentSource="Header"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <TextBlock Grid.Column="4"
                               Margin="{TemplateBinding Padding}"
                               Text="{TemplateBinding InputGestureText}" />
                </Grid>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsHighlighted" Value="true">
                    <Setter TargetName="Bg" Property="Fill" Value="{StaticResource MenuItemSelectionFill}" />
                    <Setter TargetName="Bg" Property="Stroke" Value="#8071CBF1" />
                    <Setter TargetName="InnerBorder" Property="Stroke" Value="#40FFFFFF" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="#FF9A9A9A" />
                    <Setter TargetName="GlyphPanel" Property="Background" Value="#EEE9E9" />
                    <Setter TargetName="GlyphPanel" Property="BorderBrush" Value="#DBD6D6" />
                    <Setter TargetName="Glyph" Property="Fill" Value="#848589" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="ComponentResourceKey3" TargetType="{x:Type MenuItem}">
            <Grid SnapsToDevicePixels="true">
                <Rectangle x:Name="OuterBorder"
                           RadiusX="2"
                           RadiusY="2" />
                <Rectangle x:Name="Bg"
                           Margin="1"
                           Fill="{TemplateBinding Background}"
                           RadiusX="1"
                           RadiusY="1"
                           Stroke="{TemplateBinding BorderBrush}"
                           StrokeThickness="1" />
                <Rectangle x:Name="InnerBorder" Margin="2" />
                <DockPanel>
                    <ContentPresenter x:Name="Icon"
                                      Margin="4,0,6,0"
                                      VerticalAlignment="Center"
                                      ContentSource="Icon"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <Path x:Name="GlyphPanel"
                          Margin="7,0,0,0"
                          VerticalAlignment="Center"
                          Data="{StaticResource Checkmark}"
                          Fill="{TemplateBinding Foreground}"
                          FlowDirection="LeftToRight"
                          Visibility="Collapsed" />
                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                      ContentSource="Header"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </DockPanel>
                <Popup x:Name="PART_Popup"
                       AllowsTransparency="true"
                       Focusable="false"
                       HorizontalOffset="1"
                       IsOpen="{Binding IsSubmenuOpen,
                                        RelativeSource={RelativeSource TemplatedParent}}"
                       Placement="Bottom"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       VerticalOffset="-1">
                    <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                        <ContentControl x:Name="SubMenuBorder"
                                        IsTabStop="false"
                                        Template="{DynamicResource {ComponentResourceKey ResourceId=SubmenuContent,
                                                                                         TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <ScrollViewer x:Name="SubMenuScrollViewer"
                                          CanContentScroll="true"
                                          Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
                                                                                        TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas Width="0"
                                            Height="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                        <Rectangle Width="{Binding ActualWidth,
                                                                   ElementName=SubMenuBorder}"
                                                   Height="{Binding ActualHeight,
                                                                    ElementName=SubMenuBorder}"
                                                   Fill="{StaticResource SubMenuBackgroundBrush}" />
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter"
                                                    Margin="2"
                                                    Grid.IsSharedSizeScope="true"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Grid>
                            </ScrollViewer>
                        </ContentControl>
                    </Microsoft_Windows_Themes:SystemDropShadowChrome>
                </Popup>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                    <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                </Trigger>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                    <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                    <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
                </Trigger>
                <Trigger Property="IsHighlighted" Value="true">
                    <Setter TargetName="Bg" Property="Stroke" Value="#90717070" />
                    <Setter TargetName="OuterBorder" Property="Stroke" Value="#50FFFFFF" />
                    <Setter TargetName="InnerBorder" Property="Stroke" Value="#50FFFFFF" />
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                    <Setter TargetName="Bg" Property="Stroke" Value="#E0717070" />
                    <Setter TargetName="Bg" Property="Fill" Value="{StaticResource MenuItemPressedFill}" />
                    <Setter TargetName="InnerBorder" Property="Stroke" Value="#50747272" />
                </Trigger>
                <Trigger Property="IsSubmenuOpen" Value="true">
                    <Setter TargetName="Bg" Property="Stroke" Value="#E0717070" />
                    <Setter TargetName="Bg" Property="Fill" Value="{StaticResource MenuItemPressedFill}" />
                    <Setter TargetName="InnerBorder" Property="Stroke" Value="#50747272" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="#FF9A9A9A" />
                    <Setter TargetName="GlyphPanel" Property="Fill" Value="#848589" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <DataTemplate x:Key="DataTemplate_Menu">
            <Grid />
        </DataTemplate>
        <ControlTemplate x:Key="ComponentResourceKey4" TargetType="{x:Type MenuItem}">
            <Grid SnapsToDevicePixels="true">
                <Rectangle x:Name="Bg"
                           Fill="{TemplateBinding Background}"
                           RadiusX="2"
                           RadiusY="2"
                           Stroke="{TemplateBinding BorderBrush}"
                           StrokeThickness="1" />
                <Rectangle x:Name="InnerBorder"
                           Margin="1"
                           RadiusX="2"
                           RadiusY="2" />
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"
                                          MinWidth="24"
                                          SharedSizeGroup="MenuItemIconColumnGroup" />
                        <ColumnDefinition Width="4" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="37" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                        <ColumnDefinition Width="17" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="Icon"
                                      Margin="1"
                                      VerticalAlignment="Center"
                                      ContentSource="Icon"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <Border x:Name="GlyphPanel"
                            Width="22"
                            Height="22"
                            Margin="1"
                            Background="#E6EFF4"
                            BorderBrush="#CDD3E6"
                            BorderThickness="1"
                            CornerRadius="3"
                            Visibility="Hidden">
                        <Path x:Name="Glyph"
                              Width="9"
                              Height="11"
                              Data="{StaticResource Checkmark}"
                              Fill="#0C12A1"
                              FlowDirection="LeftToRight" />
                    </Border>
                    <ContentPresenter Grid.Column="2"
                                      Margin="{TemplateBinding Padding}"
                                      ContentSource="Header"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <TextBlock Grid.Column="4"
                               Margin="{TemplateBinding Padding}"
                               Text="{TemplateBinding InputGestureText}" />
                </Grid>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsHighlighted" Value="true">
                    <Setter TargetName="Bg" Property="Fill" Value="{StaticResource MenuItemSelectionFill}" />
                    <Setter TargetName="Bg" Property="Stroke" Value="#8071CBF1" />
                    <Setter TargetName="InnerBorder" Property="Stroke" Value="#40FFFFFF" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="#FF9A9A9A" />
                    <Setter TargetName="GlyphPanel" Property="Background" Value="#EEE9E9" />
                    <Setter TargetName="GlyphPanel" Property="BorderBrush" Value="#DBD6D6" />
                    <Setter TargetName="Glyph" Property="Fill" Value="#848589" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="ComponentResourceKey5" TargetType="{x:Type MenuItem}">
            <Grid SnapsToDevicePixels="true">
                <Rectangle x:Name="OuterBorder"
                           RadiusX="2"
                           RadiusY="2" />
                <Rectangle x:Name="Bg"
                           Margin="1"
                           Fill="{TemplateBinding Background}"
                           RadiusX="1"
                           RadiusY="1"
                           Stroke="{TemplateBinding BorderBrush}"
                           StrokeThickness="1" />
                <Rectangle x:Name="InnerBorder" Margin="2" />
                <DockPanel>
                    <ContentPresenter x:Name="Icon"
                                      Margin="4,0,6,0"
                                      VerticalAlignment="Center"
                                      ContentSource="Icon"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <Path x:Name="GlyphPanel"
                          Margin="7,0,0,0"
                          VerticalAlignment="Center"
                          Data="{StaticResource Checkmark}"
                          Fill="{TemplateBinding Foreground}"
                          FlowDirection="LeftToRight"
                          Visibility="Collapsed" />
                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                      ContentSource="Header"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </DockPanel>
                <Popup x:Name="PART_Popup"
                       AllowsTransparency="true"
                       Focusable="false"
                       HorizontalOffset="1"
                       IsOpen="{Binding IsSubmenuOpen,
                                        RelativeSource={RelativeSource TemplatedParent}}"
                       Placement="Bottom"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       VerticalOffset="-1">
                    <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                        <ContentControl x:Name="SubMenuBorder"
                                        IsTabStop="false"
                                        Template="{DynamicResource {ComponentResourceKey ResourceId=SubmenuContent,
                                                                                         TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <ScrollViewer x:Name="SubMenuScrollViewer"
                                          CanContentScroll="true"
                                          Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
                                                                                        TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas Width="0"
                                            Height="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                        <Rectangle Width="{Binding ActualWidth,
                                                                   ElementName=SubMenuBorder}"
                                                   Height="{Binding ActualHeight,
                                                                    ElementName=SubMenuBorder}"
                                                   Fill="{StaticResource SubMenuBackgroundBrush}" />
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter"
                                                    Margin="2"
                                                    Grid.IsSharedSizeScope="true"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Grid>
                            </ScrollViewer>
                        </ContentControl>
                    </Microsoft_Windows_Themes:SystemDropShadowChrome>
                </Popup>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                    <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                </Trigger>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                    <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                    <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
                </Trigger>
                <Trigger Property="IsHighlighted" Value="true">
                    <Setter TargetName="Bg" Property="Stroke" Value="#90717070" />
                    <Setter TargetName="OuterBorder" Property="Stroke" Value="#50FFFFFF" />
                    <Setter TargetName="InnerBorder" Property="Stroke" Value="#50FFFFFF" />
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                    <Setter TargetName="Bg" Property="Stroke" Value="#E0717070" />
                    <Setter TargetName="Bg" Property="Fill" Value="{StaticResource MenuItemPressedFill}" />
                    <Setter TargetName="InnerBorder" Property="Stroke" Value="#50747272" />
                </Trigger>
                <Trigger Property="IsSubmenuOpen" Value="true">
                    <Setter TargetName="Bg" Property="Stroke" Value="#E0717070" />
                    <Setter TargetName="Bg" Property="Fill" Value="{StaticResource MenuItemPressedFill}" />
                    <Setter TargetName="InnerBorder" Property="Stroke" Value="#50747272" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="#FF9A9A9A" />
                    <Setter TargetName="GlyphPanel" Property="Fill" Value="#848589" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="MenuItemStyle_MenuItemSecond" TargetType="{x:Type MenuItem}">
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="ScrollViewer.PanningMode" Value="Both" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
            <Style.Triggers>
                <Trigger Property="Role" Value="TopLevelHeader">
                    <Setter Property="Padding" Value="7,2,8,3" />
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                </Trigger>
                <Trigger Property="Role" Value="TopLevelItem">
                    <Setter Property="Padding" Value="7,2,8,3" />
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                </Trigger>
                <Trigger Property="Role" Value="SubmenuHeader">
                    <Setter Property="Padding" Value="2,3,2,3" />
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                </Trigger>
                <Trigger Property="Role" Value="SubmenuItem">
                    <Setter Property="Padding" Value="2,3,2,3" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="MenuItemStyle_MenuSencond" TargetType="{x:Type MenuItem}">
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="ScrollViewer.PanningMode" Value="Both" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
            <Style.Triggers>
                <Trigger Property="Role" Value="TopLevelHeader">
                    <Setter Property="Padding" Value="7,2,8,3" />
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                </Trigger>
                <Trigger Property="Role" Value="TopLevelItem">
                    <Setter Property="Padding" Value="7,2,8,3" />
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                </Trigger>
                <Trigger Property="Role" Value="SubmenuHeader">
                    <Setter Property="Padding" Value="2,3,2,3" />
                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                </Trigger>
                <Trigger Property="Role" Value="SubmenuItem">
                    <Setter Property="Padding" Value="2,3,2,3" />
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Window.DataContext>
        <Binding Source="{StaticResource MainWindow_VMDataSource}" />
    </Window.DataContext>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <cmd:EventToCommand Command="{Binding CmdExit, Mode=OneWay}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Grid Margin="2">
        <Grid.Resources>
            <HierarchicalDataTemplate x:Key="ChildTreeViewTemplate">
                <HierarchicalDataTemplate.Resources>
                    <Storyboard x:Key="Storyboard1">
                        <ColorAnimationUsingKeyFrames RepeatBehavior="Forever"
                                                      Storyboard.TargetName="p"
                                                      Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                            <EasingColorKeyFrame KeyTime="0:0:0" Value="#FF4E4E4E" />
                            <EasingColorKeyFrame KeyTime="0:0:0.5" Value="#FFD40B0B" />
                        </ColorAnimationUsingKeyFrames>
                    </Storyboard>
                </HierarchicalDataTemplate.Resources>
                <Canvas Height="18">
                    <StackPanel Canvas.Left="{x:Static localInterface:SmartLCTViewModeBase.PortMaxLoadSize}"
                                Canvas.Top="1"
                                Orientation="Horizontal">
                        <TextBlock Foreground="White" Text="{DynamicResource Lang_SmartLCT_MainWin_MaxLoadSize}" />
                        <TextBlock Foreground="White" Text="{Binding MaxLoadArea, Converter={StaticResource sizeConvertString}}" />
                        <TextBlock Foreground="White" Text="{DynamicResource Lang_SmartLCT_MainWin_CurrentLoadSize}" />
                        <TextBlock Foreground="White" Text="{Binding LoadSize, Converter={StaticResource rectConvertString}}" />
                    </StackPanel>
                    <localInterface:MyTreeViewPortButton Name="myPort"
                                                         Canvas.Left="0"
                                                         Canvas.Top="0"
                                                         Width="{x:Static localInterface:SmartLCTViewModeBase.PortMaxLoadSize}"
                                                         BorderBrush="Black"
                                                         BorderThickness="0.5">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonDown">
                                <cmd:EventToCommand Command="{Binding CmdSelectedTreeViewValueWithPort, Source={StaticResource MainWindow_VMDataSource}}" CommandParameter="{Binding}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </localInterface:MyTreeViewPortButton>
                    <!--Canvas.ContextMenu>
                        <ContextMenu >
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Cut}" Command="{x:Static my:SmartLCTControl.CutCommand}" />
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Copy}" Command="{x:Static my:SmartLCTControl.CopyCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Paste}" Command="{x:Static my:SmartLCTControl.PasteCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Clear}" Command="{x:Static my:SmartLCTControl.ClearCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_SelectedAll}" Command="{x:Static my:SmartLCTControl.SelecteAllCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_CancelSelectedAll}" Command="{x:Static my:SmartLCTControl.CancelSelectedAllCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Delete}" Command="{x:Static my:SmartLCTControl.DeleteCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_ClearLine}" Command="{x:Static my:SmartLCTControl.ClearLineCommand}"/>
                        </ContextMenu>
                    </Canvas.ContextMenu-->
                </Canvas>

            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate x:Key="TreeViewTemplate"
                                      ItemTemplate="{StaticResource ChildTreeViewTemplate}"
                                      ItemsSource="{Binding PortConnectInfoList}">
                <HierarchicalDataTemplate.Resources>
                    <Storyboard x:Key="Storyboard1">
                        <ColorAnimationUsingKeyFrames RepeatBehavior="Forever"
                                                      Storyboard.TargetName="p"
                                                      Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                            <EasingColorKeyFrame KeyTime="0:0:0" Value="#FF4E4E4E" />
                            <EasingColorKeyFrame KeyTime="0:0:0.5" Value="#FFD40B0B" />
                        </ColorAnimationUsingKeyFrames>
                    </Storyboard>
                </HierarchicalDataTemplate.Resources>
                <Canvas Height="18">
                    <StackPanel Canvas.Left="{x:Static localInterface:SmartLCTViewModeBase.SenderMaxLoadSize}"
                                Canvas.Top="1"
                                Orientation="Horizontal">
                        <TextBlock Foreground="White" Text="{DynamicResource Lang_SmartLCT_MainWin_MaxLoadSize}" />
                        <TextBlock Foreground="White" Text="{Binding MaxLoadArea, Converter={StaticResource sizeConvertString}}" />
                        <TextBlock Foreground="White" Text="{DynamicResource Lang_SmartLCT_MainWin_CurrentLoadSize}" />
                        <TextBlock Foreground="White" Text="{Binding LoadSize, Converter={StaticResource rectConvertString}}" />
                    </StackPanel>
                    <localInterface:MyTreeViewSenderButton Name="mySendekr"
                                                           Canvas.Left="0"
                                                           Canvas.Top="0"
                                                           Width="{x:Static localInterface:SmartLCTViewModeBase.SenderMaxLoadSize}"
                                                           VerticalAlignment="Stretch"
                                                           Background="Green"
                                                           BorderBrush="Black">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonDown">
                                <cmd:EventToCommand Command="{Binding CmdSelectedTreeViewValueWithSender, Source={StaticResource MainWindow_VMDataSource}}" CommandParameter="{Binding}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </localInterface:MyTreeViewSenderButton>
                    <!--Canvas.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Cut}" Command="{x:Static my:SmartLCTControl.CutCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Copy}" Command="{x:Static my:SmartLCTControl.CopyCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Paste}" Command="{x:Static my:SmartLCTControl.PasteCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Clear}" Command="{x:Static my:SmartLCTControl.ClearCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_SelectedAll}" Command="{x:Static my:SmartLCTControl.SelecteAllCommand}"/>
                            <MenuItem Header="{DynamicResource Lang_SmartLCT_Delete}" Command="{x:Static my:SmartLCTControl.DeleteCommand}"/>
                        </ContextMenu>
                    </Canvas.ContextMenu-->
                    <localInterface:WarnControl Name="p"
                                                Canvas.Left="380"
                                                Canvas.Top="1"
                                                Width="30"
                                                Height="18"
                                                Background="#FF4E4E4E"
                                                Visibility="Hidden">
                        <localInterface:WarnControl.ToolTip>
                            <ToolTip Content="{Binding IsOverLoad, Converter={StaticResource isOverLoadConvertStr}, ConverterParameter=Tooltipdaizai}" />
                        </localInterface:WarnControl.ToolTip>
                    </localInterface:WarnControl>

                </Canvas>
                <HierarchicalDataTemplate.Triggers />
            </HierarchicalDataTemplate>

            <Style TargetType="{x:Type localInterface:MyLockAndVisibleButton}">
                <Setter Property="IsOverLoad" Value="{Binding IsOverLoad, Mode=TwoWay}" />
                <Setter Property="IsLocked" Value="{Binding IsLocked, Mode=TwoWay}" />
                <Setter Property="Visible" Value="{Binding Visible, Mode=TwoWay}" />
                <Setter Property="Element" Value="{Binding}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type localInterface:MyLockAndVisibleButton}">

                            <DockPanel>
                                <TextBlock Foreground="{Binding IsOverLoad, Converter={StaticResource isOverLoadConvertColor}}" Text="{Binding IsOverLoad, Converter={StaticResource isOverLoadConvertStr}, ConverterParameter=Foredaizai}" />
                                <TextBlock DockPanel.Dock="Left"
                                           Foreground="{Binding IsOverLoad,
                                                                Converter={StaticResource isOverLoadConvertColor}}"
                                           Text="{Binding LoadSize,
                                                          Converter={StaticResource rectConvertString}}" />
                            </DockPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <DataTemplate x:Key="DataTemplate_SenderTypeList">
                <Grid>
                    <!--<Image HorizontalAlignment="Left" Visibility="Hidden"  Width="34" Height="30" Margin="0"  Source="{Binding SenderPicturePath, Mode=TwoWay}"/>-->
                    <TextBlock Margin="0,0,0,0"
                               HorizontalAlignment="Stretch"
                               VerticalAlignment="Stretch"
                               Foreground="White"
                               Text="{Binding SenderTypeName,
                                              Mode=TwoWay}"
                               TextWrapping="Wrap"
                               d:LayoutOverrides="Height" />
                </Grid>
            </DataTemplate>
            <Style x:Key="ListBoxItemStyle_SenderType" TargetType="{x:Type ListBoxItem}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                <Setter Property="Padding" Value="2,0,0,0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="Storyboard1" />
                            </ControlTemplate.Resources>
                            <Border x:Name="Bd"
                                    Background="#FF4F4F4F"
                                    BorderBrush="#FF6E6E6E"
                                    BorderThickness="0,1,0,0"
                                    Padding="0,5"
                                    SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>-->
                                    <Setter TargetName="Bd" Property="Background" Value="#FF6E6E6E" />
                                    <!--<Setter Property="OpacityMask" TargetName="contentPresenter" Value="Black"/>-->
                                </Trigger>
                                <!--<Trigger Property="Selector.IsSelected" Value="False">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource Storyboard1}"/>
                                    </Trigger.EnterActions>
                                    <Setter Property="OpacityMask" TargetName="contentPresenter" Value="#FF4F4F4F"/>
                                </Trigger>-->
                                <!--<MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="true"/>
                                        <Condition Property="Selector.IsSelectionActive" Value="false"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                    <Setter Property="Background" TargetName="Bd" Value="#FF6E6E6E"/>
                                    <Setter Property="OpacityMask" TargetName="contentPresenter" Value="#FF6E6E6E"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="false"/>
                                        <Condition Property="IsMouseOver" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd"  Value="#FF6E6E6E"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="true"/>
                                        <Condition Property="IsMouseOver" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd"  Value="#FF6E6E6E"/>
                                </MultiTrigger>-->
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>



        </Grid.Resources>
        <Grid.DataContext>
            <Binding Source="{StaticResource MainWindow_VMDataSource}" />
        </Grid.DataContext>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="20" />
        </Grid.RowDefinitions>
        <Grid Margin="1.5,0,-0.5,-4" d:LayoutOverrides="GridBox">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="4.3*" />
                <ColumnDefinition Width="*"
                                  MinWidth="300"
                                  MaxWidth="500" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="60" />
                <RowDefinition Height="850*" />
                <RowDefinition Height="135" />
            </Grid.RowDefinitions>
            <Grid Grid.ColumnSpan="2"
                  Margin="0,0,0,0.885"
                  Background="#FF232426"
                  IsEnabled="{Binding IsControlEnabled,
                                      Mode=TwoWay}">
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition Height="0.12" />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Menu Grid.Row="0"
                      Background="#FF4F4F4F"
                      Foreground="White">
                    <MenuItem Header="{DynamicResource Lang_SmartLCT_File}"
                              ItemContainerStyle="{DynamicResource MenuItemStyleParent}"
                              ItemTemplate="{DynamicResource DataTemplate_Menu}">
                        <MenuItem Header="{DynamicResource Lang_SmartLCT_NewLayer}"
                                  ItemContainerStyle="{DynamicResource MenuItemStyleParent}"
                                  Style="{DynamicResource MenuItemStyle_MenuSencond}">
                            <MenuItem Command="{Binding CmdNewEmptyProject}" Header="{DynamicResource Lang_StartWindow_NewEmptyProject}" />
                            <MenuItem Command="{Binding CmdNewWizard}" Header="{DynamicResource Lang_StartWindow_NewWizard}" />
                            <MenuItem Command="{Binding CmdMenuNewLayer}" Header="{DynamicResource Lang_SmartLCT_MainWin_NewScreen}" />
                        </MenuItem>
                        <MenuItem Command="{Binding CmdOpenConfigFile}" Header="{DynamicResource Lang_SmartLCT_OpenConfigFile}" />
                        <MenuItem Command="{Binding CmdClose}" Header="{DynamicResource Lang_SmartLCT_Close}" />
                        <MenuItem Command="{Binding CmdSaveSysConfigFile}" Header="{DynamicResource Lang_SmartLCT_Save}" />
                        <!--<MenuItem Header="{DynamicResource Lang_Global_SaveAs}" Command="{Binding CmdOtherSaveSysConfigFile}"/>-->
                        <MenuItem Command="{Binding CmdExit}" Header="{DynamicResource Lang_SmartLCT_Exit}" />
                    </MenuItem>
                    <MenuItem Header="{DynamicResource Lang_SmartLCT_Edit}">
                        <MenuItem Command="{x:Static my:SmartLCTControl.CutCommand}" Header="{DynamicResource Lang_SmartLCT_Cut}" />
                        <MenuItem Command="{x:Static my:SmartLCTControl.CopyCommand}" Header="{DynamicResource Lang_SmartLCT_Copy}" />
                        <MenuItem Command="{x:Static my:SmartLCTControl.PasteCommand}" Header="{DynamicResource Lang_SmartLCT_Paste}" />
                        <MenuItem Command="{x:Static my:SmartLCTControl.DeleteCommand}" Header="{DynamicResource Lang_SmartLCT_Delete}" />
                        <MenuItem Command="{x:Static my:SmartLCTControl.SelecteAllCommand}" Header="{DynamicResource Lang_SmartLCT_SelectedAll}" />
                        <MenuItem Command="{x:Static my:SmartLCTControl.CancelSelectedAllCommand}" Header="{DynamicResource Lang_SmartLCT_CancelSelectedAll}" />
                        <MenuItem Command="{x:Static my:SmartLCTControl.ClearCommand}" Header="{DynamicResource Lang_SmartLCT_Clear}" />
                        <MenuItem Command="{x:Static my:SmartLCTControl.ClearLineCommand}" Header="{DynamicResource Lang_SmartLCT_ClearLine}" />
                    </MenuItem>
                    <MenuItem Header="{DynamicResource Lang_SmartLCT_Tool}">
                        <MenuItem Command="{Binding CmdShowSystemCheckDlg, Mode=OneWay}" Header="{DynamicResource Lang_SmartLCT_SystemCheckDlg}" />
                        <MenuItem Command="{Binding CmdShowScanBoardConfigManager, Mode=OneWay}" Header="{DynamicResource Lang_SmartLCT_ScanBoardConfigManager}" />
                        <MenuItem Command="{Binding CmdShowEDIDManager, Mode=OneWay}" Header="{DynamicResource Lang_SmartLCT_EDIDManager}" />
                        <MenuItem Command="{Binding CmdShowBrightAdjust, Mode=OneWay}" Header="{DynamicResource Lang_SmartLCT_BrightAdjust}" />
                    </MenuItem>
                    <MenuItem Header="{DynamicResource Lang_SmartLCT_Plugin}">
                        <MenuItem Command="{Binding CmdStartTestTool, Mode=OneWay}" Header="{DynamicResource Lang_SmartLCT_TestTool}" />
                        <MenuItem Command="{Binding CmdStartCalculator, Mode=OneWay}" Header="{DynamicResource Lang_SmartLCT_Calculator}" />
                    </MenuItem>
                    <MenuItem Header="{DynamicResource Lang_SmartLCT_Language}"
                              ItemContainerStyle="{DynamicResource Sty_LangMenuItem}"
                              ItemTemplate="{DynamicResource DT_LangItem}"
                              ItemsSource="{Binding LangItemCollection}" />
                    <MenuItem Header="{DynamicResource Lang_SmartLCT_Help}">
                        <MenuItem Command="{Binding CmdHelp, Mode=OneWay}" Header="{DynamicResource Lang_SmartLCT_ViewHelp}" />
                        <MenuItem Header="{DynamicResource Lang_SmartLCT_About}" />
                    </MenuItem>
                </Menu>
                <Grid Grid.Row="2"
                      Margin="0,0,0,-1.5"
                      Background="{x:Null}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto" />
                        <RowDefinition Height="6" />
                    </Grid.RowDefinitions>
                    <Grid Margin="0" Background="#FF585858">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="254*" />
                            <ColumnDefinition Width="311*" />
                        </Grid.ColumnDefinitions>
                        <ToolBar x:Name="toolBar_File"
                                 Grid.Row="0"
                                 Grid.Column="0"
                                 HorizontalAlignment="Left"
                                 Background="{x:Null}"
                                 FocusManager.IsFocusScope="True">
                            <Button x:Name="button_New"
                                    Width="32"
                                    HorizontalAlignment="Left"
                                    Command="{Binding CmdMenuNewLayer}"
                                    Content="{DynamicResource Lang_SmartLCT_MainWin_New}"
                                    Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_NewScreen}" />
                                </Button.ToolTip>
                                <Button.Background>
                                    <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/New.png" />
                                </Button.Background>
                                <i:Interaction.Behaviors>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/New.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/New.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/New.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                            <Button x:Name="button_OpenFile"
                                    Width="32"
                                    HorizontalAlignment="Left"
                                    Command="{Binding CmdOpenConfigFile}"
                                    Content="{DynamicResource Lang_SmartLCT_MainWin_Open}"
                                    Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_OpenFile}" />
                                </Button.ToolTip>
                                <Button.Background>
                                    <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Open.png" />
                                </Button.Background>
                                <i:Interaction.Behaviors>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Open.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Open.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Open.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                            <Button x:Name="button_save"
                                    Width="32"
                                    HorizontalAlignment="Left"
                                    Command="{Binding CmdSaveSysConfigFile}"
                                    Content="{DynamicResource Lang_SmartLCT_MainWin_Save}"
                                    Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Save}" />
                                </Button.ToolTip>
                                <Button.Background>
                                    <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Save.png" />
                                </Button.Background>
                                <i:Interaction.Behaviors>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Save.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Save.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Save.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                            <Button x:Name="button_sendToHw"
                                    Width="32"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Stretch"
                                    Command="{Binding CmdShowSendDisplayInfoDlg,
                                                      Mode=OneWay}"
                                    Content="{DynamicResource Lang_Global_SendToHardware}"
                                    Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_Global_SendToHardware}" />
                                </Button.ToolTip>
                                <Button.Background>
                                    <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/SendToHW.png" />
                                </Button.Background>
                                <i:Interaction.Behaviors>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/SendToHW.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/SendToHW.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/SendToHW.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                </i:Interaction.Behaviors>
                            </Button>

                        </ToolBar>
                        <ToolBar x:Name="toolBar_Edit"
                                 Grid.Row="0"
                                 Grid.Column="0"
                                 Width="Auto"
                                 Margin="130,0,0,0"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Stretch"
                                 Background="{x:Null}"
                                 BorderBrush="{x:Null}"
                                 FocusManager.IsFocusScope="True">
                            <Button x:Name="button_UnDo"
                                    Width="32"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Command="{x:Static my:SmartLCTControl.UnDoCommand}"
                                    Content="{DynamicResource Lang_SmartLCT_MainWin_Undo}"
                                    Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Undo}" />
                                </Button.ToolTip>
                                <Button.Background>
                                    <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/UnDo.png" />
                                </Button.Background>
                                <i:Interaction.Behaviors>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/UnDo.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/UnDo.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/UnDo.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                            <Button x:Name="button_ReDo"
                                    Width="32"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Command="{x:Static my:SmartLCTControl.ReDoCommand}"
                                    Content="{DynamicResource Lang_SmartLCT_MainWin_Redo}"
                                    Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Redo}" />
                                </Button.ToolTip>
                                <Button.Background>
                                    <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/ReDo.png" />
                                </Button.Background>
                                <i:Interaction.Behaviors>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/ReDo.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/ReDo.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/ReDo.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                            <Button x:Name="button_Cut1"
                                    Width="32"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Command="{x:Static my:SmartLCTControl.CutCommand}"
                                    Content="{DynamicResource Lang_SmartLCT_MainWin_Cut}"
                                    Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Cut}" />
                                </Button.ToolTip>
                                <Button.Background>
                                    <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Cut.png" />
                                </Button.Background>
                                <i:Interaction.Behaviors>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Cut.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Cut.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Cut.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                            <Button x:Name="button_Copy"
                                    Width="32"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Command="{x:Static my:SmartLCTControl.CopyCommand}"
                                    Content="{DynamicResource Lang_SmartLCT_MainWin_Copy}"
                                    Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Copy}" />
                                </Button.ToolTip>
                                <Button.Background>
                                    <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Copy.png" />
                                </Button.Background>
                                <i:Interaction.Behaviors>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Copy.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Copy.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Copy.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                            <Button x:Name="button_Paste"
                                    Width="32"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Command="{x:Static my:SmartLCTControl.PasteCommand}"
                                    Content="{DynamicResource Lang_SmartLCT_MainWin_Paste}"
                                    Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Paste}" />
                                </Button.ToolTip>
                                <Button.Background>
                                    <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Paste.png" />
                                </Button.Background>
                                <i:Interaction.Behaviors>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Paste.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Paste.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Paste.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                            <Button x:Name="button_Delete"
                                    Width="32"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Command="{x:Static my:SmartLCTControl.DeleteCommand}"
                                    Content="{DynamicResource Lang_SmartLCT_MainWin_Delete}"
                                    Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Delete}" />
                                </Button.ToolTip>
                                <Button.Background>
                                    <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Delete.png" />
                                </Button.Background>
                                <i:Interaction.Behaviors>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Delete.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Delete.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Delete.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                            <Button x:Name="button_ClearLine"
                                    Width="32"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Command="{x:Static my:SmartLCTControl.ClearLineCommand}"
                                    Content="{DynamicResource Lang_SmartLCT_MainWin_ClearLine}"
                                    Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_ClearLine}" />
                                </Button.ToolTip>
                                <Button.Background>
                                    <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/ClearLine.png" />
                                </Button.Background>
                                <i:Interaction.Behaviors>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/ClearLine.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/ClearLine.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/ClearLine.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                            <Button x:Name="button_Increased"
                                    Width="32"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Command="{x:Static my:SmartLCTControl.IncreaseCommand}"
                                    Content="{DynamicResource Lang_SmartLCT_MainWin_Enlarge}"
                                    Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Enlarge}" />
                                </Button.ToolTip>
                                <Button.Background>
                                    <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Increase.png" />
                                </Button.Background>
                                <i:Interaction.Behaviors>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Increase.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Increase.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Increase.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                            <Button x:Name="button_Decrease"
                                    Width="32"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Command="{x:Static my:SmartLCTControl.DecreaseCommand}"
                                    Content="{DynamicResource Lang_SmartLCT_MainWin_Reduce}"
                                    Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_Reduce}" />
                                </Button.ToolTip>
                                <Button.Background>
                                    <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Decrease.png" />
                                </Button.Background>
                                <i:Interaction.Behaviors>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/Decrease.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/Decrease.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/Decrease.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                            <Button x:Name="button_orignalSize"
                                    Width="32"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Command="{x:Static my:SmartLCTControl.OrginalSizeCommand}"
                                    Foreground="#FFFFFFFF"
                                    Style="{DynamicResource ToolButtonStyle}">
                                <Button.ToolTip>
                                    <ToolTip Content="{DynamicResource Lang_SmartLCT_MainWin_OriginalSize}" />
                                </Button.ToolTip>
                                <Button.Background>
                                    <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/OriginalSize.png" />
                                </Button.Background>
                                <i:Interaction.Behaviors>
                                    <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Disable/OriginalSize.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.DisableImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Normal/OriginalSize.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.NormalImage>
                                        <Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                            <ImageBrush ImageSource="/Nova.SmartLCT.Skin;component/Image/BlueMode/Selecte/OriginalSize.png" />
                                        </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior.MouseOverImage>
                                    </Nova_SmartLCT_Behavior:ButtonStatePictureBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                        </ToolBar>
                    </Grid>
                    <Grid Grid.Row="1" />
                </Grid>
            </Grid>
            <Grid Grid.Column="1"
                  Width="3"
                  Height="0"
                  Margin="42.25,137,0,0"
                  HorizontalAlignment="Left"
                  VerticalAlignment="Top" />
            <Grid Grid.Row="1"
                  Grid.Column="0"
                  Margin="0"
                  Background="#FF232426">
                <TabControl Background="#FF232426"
                            BorderBrush="{x:Null}"
                            ItemContainerStyle="{DynamicResource TabItemStyle1}"
                            SelectedIndex="{Binding SelectedEnvironMentIndex,
                                                    Mode=TwoWay}"
                            Style="{DynamicResource TabControlStyle_MainWinow_Environment}"
                            TabStripPlacement="Left">
                    <TabItem Height="28"
                             Margin="25.1,0,-61.7,-31.727"
                             VerticalAlignment="Bottom"
                             Focusable="{Binding IsControlEnabled,
                                                 Mode=TwoWay}"
                             FontSize="13.333"
                             Header="{DynamicResource Lang_SmartLCT_MainWin_ScannerConnect}"
                             RenderTransformOrigin="0,0"
                             d:LayoutOverrides="VerticalAlignment">
                        <TabItem.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform Angle="90" />
                                <TranslateTransform />
                            </TransformGroup>
                        </TabItem.RenderTransform>
                        <Grid Margin="-6,-9,0,0" Background="#FF232426">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="0.067*" />
                                <RowDefinition Height="0.933*" />
                            </Grid.RowDefinitions>
                            <TabControl x:Name="tabControl1"
                                        Grid.RowSpan="2"
                                        Margin="0"
                                        Background="#FF14141C"
                                        BorderBrush="#FF585858"
                                        ItemTemplate="{DynamicResource DataTemplate_tabHeader}"
                                        ItemsPanel="{DynamicResource ItemsPanelTemplate_tabHeader}"
                                        ItemsSource="{Binding MyScreen.ElementCollection,
                                                              Mode=TwoWay}"
                                        SelectedIndex="{Binding SelectedIndex,
                                                                Mode=TwoWay}"
                                        SelectedValue="{Binding SelectedValue,
                                                                Mode=TwoWay}"
                                        Style="{DynamicResource TabControlStyle_tabHeader}">


                                <TabControl.ContentTemplate>
                                    <DataTemplate>
                                        <my:SmartLCTControl MyRectLayer="{Binding}" SmartLCTActionManager="{Binding MyActionManager, Mode=TwoWay}">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="ContentChanged">
                                                    <cmd:EventToCommand Command="" MustToggleIsEnabled="True" />
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </my:SmartLCTControl>
                                    </DataTemplate>
                                </TabControl.ContentTemplate>

                            </TabControl>
                        </Grid>
                    </TabItem>
                    <TabItem Height="28"
                             Margin="24.701,0,-91.701,-93.346"
                             VerticalAlignment="Bottom"
                             Focusable="{Binding IsControlEnabled,
                                                 Mode=TwoWay}"
                             FontSize="13.333"
                             Foreground="Black"
                             Header="{DynamicResource Lang_SmartLCT_MainWin_ScrMapping}"
                             RenderTransformOrigin="0,0">
                        <TabItem.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientStop Offset="0" Color="#FFF3F3F3" />
                                <GradientStop Offset="0.5" Color="#FFEBEBEB" />
                                <GradientStop Offset="1" Color="#FFDDDDDD" />
                                <GradientStop Offset="1" Color="#FF14CDCD" />
                            </LinearGradientBrush>
                        </TabItem.Background>
                        <TabItem.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform Angle="90" />
                                <TranslateTransform />
                            </TransformGroup>
                        </TabItem.RenderTransform>
                        <Grid Margin="-6,-9,-2,-3" Background="#FF14141C">

                            <my:SmartLCTControl Background="Black"
                                                MyRectLayer="{Binding ScreenLocationRectLayer}"
                                                SmartLCTActionManager="{Binding MyActionManager,
                                                                                Mode=TwoWay}" />

                        </Grid>
                    </TabItem>
                </TabControl>
            </Grid>
            <GridSplitter Grid.Row="1"
                          Grid.RowSpan="2"
                          Grid.Column="1"
                          Width="2"
                          Margin="0"
                          HorizontalAlignment="Left"
                          VerticalAlignment="Stretch"
                          Background="#FF989A9A"
                          IsEnabled="{Binding IsControlEnabled,
                                              Mode=TwoWay}"
                          ShowsPreview="True" />
            <ScrollViewer Grid.Row="1"
                          Grid.RowSpan="2"
                          Grid.Column="1"
                          Margin="4.25,0,3.5,4"
                          Background="#FF303435"
                          CanContentScroll="True"
                          IsEnabled="{Binding IsControlEnabled,
                                              Mode=TwoWay}"
                          ScrollViewer.HorizontalScrollBarVisibility="Auto"
                          ScrollViewer.VerticalScrollBarVisibility="Auto"
                          Template="{DynamicResource ScrollViewerControlTemplate_Center}">
                <Grid Width="Auto"
                      Height="Auto"
                      DataContext="{Binding Source={StaticResource SmartLCTControlDataSource}}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <TextBlock Margin="9.25,0,6,4.167"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               Foreground="#FFDCDCDC"
                               Text="{DynamicResource Lang_SmartLCT_PleaseSelElment}"
                               Visibility="{Binding PleaseSelElmentVisible,
                                                    Mode=TwoWay,
                                                    Source={StaticResource MainWindow_VMDataSource}}" />

                    <Nova_SmartLCT_UI:ScreenMapLocationPropertyPanel Grid.Row="0"
                                                                     HorizontalAlignment="Stretch"
                                                                     VerticalAlignment="Stretch"
                                                                     CheckSenderIndex="{Binding CheckSenderIndex,
                                                                                                Mode=TwoWay}"
                                                                     CurrentScreen="{Binding CurrentScreen,
                                                                                             Mode=TwoWay}"
                                                                     DataContext="{Binding Source={StaticResource MainWindow_VMDataSource}}"
                                                                     FocusManager.IsFocusScope="True"
                                                                     Foreground="#FFDCDCDC"
                                                                     ScreenMapRealParams="{Binding ScreenMapRealParametersValue,
                                                                                                   Mode=TwoWay}"
                                                                     SmartLCTActionManager="{Binding SmartLCTActionManager,
                                                                                                     Mode=TwoWay,
                                                                                                     Source={StaticResource SmartLCTControlDataSource}}"
                                                                     Visibility="{Binding ScreenMapLocationVisible,
                                                                                          Mode=TwoWay}" />

                    <Nova_SmartLCT_UI:SenderPropertyPanel Grid.Row="2"
                                                          Margin="0,13,5,0"
                                                          VerticalAlignment="Stretch"
                                                          DataContext="{Binding Source={StaticResource MainWindow_VMDataSource}}"
                                                          FocusManager.IsFocusScope="True"
                                                          Foreground="#FFDCDCDC"
                                                          SenderRealParams="{Binding SenderRealParametersValue,
                                                                                     Mode=TwoWay}"
                                                          SmartLCTActionManager="{Binding SmartLCTActionManager,
                                                                                          Mode=TwoWay,
                                                                                          Source={StaticResource SmartLCTControlDataSource}}"
                                                          Visibility="{Binding SenderVisible,
                                                                               Mode=TwoWay}" />
                    <Nova_SmartLCT_UI:ScreenPropertyPanel Grid.Row="3"
                                                          Margin="0,5,5,0"
                                                          VerticalAlignment="Stretch"
                                                          CurrentSenderConfigInfo="{Binding CurrentSenderConfigInfo,
                                                                                            Mode=TwoWay}"
                                                          DataContext="{Binding Source={StaticResource MainWindow_VMDataSource}}"
                                                          FocusManager.IsFocusScope="True"
                                                          Foreground="#FFDCDCDC"
                                                          IncreaseOrDecreaseIndex="{Binding IncreaseOrDecreaseIndex,
                                                                                            Mode=TwoWay}"
                                                          IsConnectLine="{Binding IsConnectLine,
                                                                                  Mode=TwoWay}"
                                                          ScannerCofigCollection="{Binding ScannerTypeCollection,
                                                                                           Mode=TwoWay}"
                                                          ScreenRealParams="{Binding ScreenRealParametersValue,
                                                                                     Mode=TwoWay}"
                                                          SelectedArrangeType="{Binding SelectedArrangeType,
                                                                                        Mode=TwoWay}"
                                                          SelectedScannerConfig="{Binding SelectedScannerConfigInfo,
                                                                                          Mode=TwoWay}"
                                                          SenderAndPortPicCollection="{Binding SenderAndPortPicCollection,
                                                                                               Mode=TwoWay}"
                                                          SenderConfigCollection="{Binding SenderConfigCollection,
                                                                                           Mode=TwoWay}"
                                                          SmartLCTActionManager="{Binding SmartLCTActionManager,
                                                                                          Mode=TwoWay,
                                                                                          Source={StaticResource SmartLCTControlDataSource}}"
                                                          Visibility="{Binding ScreenVisible,
                                                                               Mode=TwoWay}" />

                    <Nova_SmartLCT_UI:ScanBoardPropertyPanel Grid.Row="4"
                                                             Margin="0,0,5,2"
                                                             VerticalAlignment="Stretch"
                                                             DataContext="{Binding Source={StaticResource MainWindow_VMDataSource}}"
                                                             FocusManager.IsFocusScope="True"
                                                             Foreground="#FFDCDCDC"
                                                             ScannerRealParams="{Binding ScannerRealParametersValue,
                                                                                         Mode=TwoWay}"
                                                             SmartLCTActionManager="{Binding SmartLCTActionManager,
                                                                                             Mode=TwoWay,
                                                                                             Source={StaticResource SmartLCTControlDataSource}}"
                                                             Visibility="{Binding ScanVisible,
                                                                                  Mode=TwoWay}" />
                    <Nova_SmartLCT_UI:CustomScanBdPropertyPanel Grid.Row="5"
                                                                Margin="0,0,5,2"
                                                                VerticalAlignment="Stretch"
                                                                DataContext="{Binding Source={StaticResource MainWindow_VMDataSource}}"
                                                                FocusManager.IsFocusScope="True"
                                                                Foreground="#FFDCDCDC"
                                                                ScannerRealParams="{Binding ScannerRealParametersValue,
                                                                                            Mode=TwoWay}"
                                                                SmartLCTActionManager="{Binding SmartLCTActionManager,
                                                                                                Mode=TwoWay,
                                                                                                Source={StaticResource SmartLCTControlDataSource}}"
                                                                Visibility="{Binding CustomScanVisible,
                                                                                     Mode=TwoWay}" />
                </Grid>
            </ScrollViewer>
            <GridSplitter Grid.Row="2"
                          Grid.Column="0"
                          Grid.ColumnSpan="1"
                          Height="2"
                          HorizontalAlignment="Stretch"
                          VerticalAlignment="Top"
                          Background="#FF989A9A"
                          IsEnabled="{Binding IsControlEnabled,
                                              Mode=TwoWay}"
                          ShowsPreview="True" />
            <Grid Grid.Row="2"
                  Grid.Column="0"
                  Margin="0,4,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="25" />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid Margin="0"
                      Background="#FF303435"
                      IsEnabled="{Binding IsControlEnabled,
                                          Mode=TwoWay}">
                    <Button Width="80"
                            Margin="8,0,100,1"
                            HorizontalAlignment="Right"
                            Command="{Binding CmdShowSendDisplayInfoDlg,
                                              Mode=OneWay}"
                            Content="{DynamicResource Lang_Global_Send}"
                            d:LayoutOverrides="VerticalAlignment, GridBox" />
                    <Button Width="80"
                            Margin="8,0,5,1"
                            HorizontalAlignment="Right"
                            Command="{Binding CmdSaveSysConfigFile,
                                              Mode=OneWay}"
                            Content="{DynamicResource Lang_Global_Save}"
                            d:LayoutOverrides="VerticalAlignment, GridBox" />
                </Grid>
                <Grid Grid.Row="1"
                      Margin="0"
                      Background="#FF414244">
                    <TreeView x:Name="treeview1"
                              Grid.Column="0"
                              Margin="0"
                              HorizontalContentAlignment="Stretch"
                              VerticalContentAlignment="Stretch"
                              Background="{x:Null}"
                              BorderBrush="#FF989A9A"
                              BorderThickness="0,0.6,0,0"
                              FocusManager.IsFocusScope="True"
                              ItemTemplate="{DynamicResource TreeViewTemplate}"
                              ItemsSource="{Binding MyScreen.SenderConnectInfoList,
                                                    Mode=TwoWay}">
                        <TreeView.ItemContainerStyle>
                            <Style TargetType="{x:Type TreeViewItem}">
                                <Setter Property="IsExpanded" Value="{Binding IsExpand, Mode=TwoWay}" />
                                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                                <Setter Property="FontWeight" Value="Normal" />
                                <Style.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="FontWeight" Value="ExtraBold" />

                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TreeView.ItemContainerStyle>
                    </TreeView>
                </Grid>
            </Grid>

        </Grid>
        <StatusBar Grid.Row="1" Background="#FF232426" />
    </Grid>
</MetroUI:MetroWindow>
